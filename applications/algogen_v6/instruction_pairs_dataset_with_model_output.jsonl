{"user_input": {"core_instruction": "我想用 Kruskal 算法在一个包含四个节点 A、B、C、D 的加权多重无向图上求最小生成树。图中的边有：C–B(15)、C–A(4)、B–A(10)、B–D(8)、B–D(18)和A–D(18)。", "style_instruction": "把每个被标记为已访问的节点都设置成深蓝色填充(#203cba)，用近乎黑色的轮廓线(#040514)，线宽大概2.5像素。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "kruskal", "data_input": {"graph": {"C": [["B", 15], ["A", 4]], "B": [["C", 15], ["A", 10], ["D", 8], ["D", 18]], "D": [["A", 18], ["B", 8], ["B", 18]], "A": [["D", 18], ["B", 10], ["C", 4]]}}, "style_overrides": {"elementStyles": {"visited_node": {"fill": "#203cba", "stroke": "#040514", "strokeWidth": 2.5}}}, "control_object": {}}, "model_output": {"algorithm_id": "kruskal", "data_input": {"graph": {"C": [["B", 15], ["A", 4]], "B": [["C", 15], ["A", 10], ["D", 8], ["D", 18]], "A": [["C", 4], ["B", 10], ["D", 18]], "D": [["B", 8], ["B", 18], ["A", 18]]}}, "style_overrides": {"elementStyles": {"visited_node": {"fill": "#203cba", "stroke": "#040514", "strokeWidth": 2.5}}}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看一下堆排序的可视化，数据是 [45, 76, 19, 17, 34, 46, 85]。", "style_instruction": "让每次被访问的节点填充成亮绿色（#05dc56），周围加个紫色描边（#6b52d8），描边宽度调到2.5。", "control_instruction": "每当有元素移动的时候，就暂停一下，大概1秒钟。"}, "gold_standard_output": {"algorithm_id": "heap_sort", "data_input": [45, 76, 19, 17, 34, 46, 85], "style_overrides": {"elementStyles": {"visited_node": {"fill": "#05dc56", "stroke": "#6b52d8", "strokeWidth": 2.5}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1000}]}}, "model_output": {"algorithm_id": "heap_sort", "data_input": [45, 76, 19, 17, 34, 46, 85], "style_overrides": {"elementStyles": {"visited_node": {"fill": "#05dc56", "stroke": "#6b52d8", "strokeWidth": 2.5}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1000}]}}}
{"user_input": {"core_instruction": "我想看到用归并排序处理数组 [74, 30, 15, 78, 99, 33, 50, 35] 的动画。", "style_instruction": "把所有标记为 pivot 的元素填充色设为 #380773，描边用 #1d5483，描边宽度调成 2.5。", "control_instruction": "每次有节点样式更新（updateNodeStyle）时就暂停大约 0.5 秒。"}, "gold_standard_output": {"algorithm_id": "merge_sort", "data_input": [74, 30, 15, 78, 99, 33, 50, 35], "style_overrides": {"elementStyles": {"pivot": {"fill": "#380773", "stroke": "#1d5483", "strokeWidth": 2.5}}}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 500}]}}, "model_output": {"algorithm_id": "merge_sort", "data_input": [74, 30, 15, 78, 99, 33, 50, 35], "style_overrides": {"elementStyles": {"pivot": {"fill": "#380773", "stroke": "#1d5483", "strokeWidth": 2.5}}}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 500}]}}}
{"user_input": {"core_instruction": "给我展示一下拓扑排序在这组数据 [38, 69, 66, 86, 51, 48, 74] 上的可视化过程。", "style_instruction": "把普通的边（normal_edge）都渲染成绿色 #6eb73c，线宽设为 3px；默认的节点或边移动动画时长调成 750 毫秒。", "control_instruction": "每当有元素发生移动（moveElements）时，都暂停大概 0.5 秒。"}, "gold_standard_output": {"algorithm_id": "topological_sort", "data_input": [38, 69, 66, 86, 51, 48, 74], "style_overrides": {"elementStyles": {"normal_edge": {"color": "#6eb73c", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 500}]}}, "model_output": {"algorithm_id": "topological_sort", "data_input": [38, 69, 66, 86, 51, 48, 74], "style_overrides": {"elementStyles": {"normal_edge": {"color": "#6eb73c", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 500}]}}}
{"user_input": {"core_instruction": "我想看一个广度优先搜索的可视化演示，从节点 A 开始遍历。图的结构和权重是：A–E(16)、A–D(13)、A–C(1)；E–A(16)、E–D(2)、E–F(16)、E–D(4)；D–B(5)、D–C(14)、D–A(13)、D–E(2)、D–E(4)；B–D(5)；C–D(14)、C–A(1)；F–E(16)。", "style_instruction": "无特殊要求", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "bfs", "data_input": {"graph": {"A": [["E", 16], ["D", 13], ["C", 1]], "E": [["A", 16], ["D", 2], ["F", 16], ["D", 4]], "D": [["B", 5], ["C", 14], ["A", 13], ["E", 2], ["E", 4]], "B": [["D", 5]], "C": [["D", 14], ["A", 1]], "F": [["E", 16]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {}}, "model_output": {"algorithm_id": "bfs", "data_input": {"graph": {"A": [["E", 16], ["D", 13], ["C", 1]], "E": [["A", 16], ["D", 2], ["F", 16], ["D", 4]], "D": [["B", 5], ["C", 14], ["A", 13], ["E", 2], ["E", 4]], "B": [["D", 5]], "C": [["D", 14], ["A", 1]], "F": [["E", 16]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看一段冒泡排序的可视化，数据是 [73, 14, 30, 54, 62, 39]。", "style_instruction": "把普通连线都弄成亮绿色(#08d94e)，宽度2px；访问过的节点填充成青绿色(#16ddd3)，边框用深绿(#66ad75)，也宽度2px；元素交换的动画稍微放慢一点，每次移动大概0.75秒。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "bubble_sort", "data_input": [73, 14, 30, 54, 62, 39], "style_overrides": {"elementStyles": {"normal_edge": {"color": "#08d94e", "strokeWidth": 2}, "visited_node": {"fill": "#16ddd3", "stroke": "#66ad75", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {}}, "model_output": {"algorithm_id": "bubble_sort", "data_input": [73, 14, 30, 54, 62, 39], "style_overrides": {"elementStyles": {"normal_edge": {"color": "#08d94e", "strokeWidth": 2}, "visited_node": {"fill": "#16ddd3", "stroke": "#66ad75", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看一段最长公共子序列（LCS）算法的可视化，输入字符串是 TTGACG 和 CGGGCGT。", "style_instruction": "无特殊要求", "control_instruction": "每当执行到 shifting（移位）操作的时候，就停顿大约1秒。"}, "gold_standard_output": {"algorithm_id": "lcs", "data_input": {"str1": "TTGACG", "str2": "CGGGCGT"}, "style_overrides": {}, "control_object": {"pauses": [{"condition": {"styleKey": "shifting"}, "duration": 1000}]}}, "model_output": {"algorithm_id": "lcs", "data_input": {"str1": "TTGACG", "str2": "CGGGCGT"}, "style_overrides": {}, "control_object": {"pauses": [{"condition": {"styleKey": "shifting"}, "duration": 1000}]}}}
{"user_input": {"core_instruction": "我想看一下快速排序在数组 [87, 10, 12, 25, 2, 9, 67] 上的动态演示。", "style_instruction": "无特殊要求", "control_instruction": "每当某个节点进入当前划分路径（in_path_node）时，就暂停大约1秒。"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [87, 10, 12, 25, 2, 9, 67], "style_overrides": {}, "control_object": {"pauses": [{"condition": {"styleKey": "in_path_node"}, "duration": 1000}]}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [87, 10, 12, 25, 2, 9, 67], "style_overrides": {}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"styleKey": "in_path_node"}, "duration": 1000}], "annotations": []}}}
{"user_input": {"core_instruction": "我想看一下插入排序的可视化，数据是 [20, 16, 29, 45, 6, 90, 83, 25]。", "style_instruction": "当元素在移动或插入时，用亮绿色填充（#4bd32c），再加一圈蓝绿色描边（#1191b3），描边宽度大约2.5。", "control_instruction": "每次节点变为空闲状态（styleKey=idle_node）时停顿0.5秒；并且每当执行 updateNodeStyle 操作时，都在节点上方显示“处理中...”的注释。"}, "gold_standard_output": {"algorithm_id": "insertion_sort", "data_input": [20, 16, 29, 45, 6, 90, 83, 25], "style_overrides": {"elementStyles": {"shifting": {"fill": "#4bd32c", "stroke": "#1191b3", "strokeWidth": 2.5}}}, "control_object": {"pauses": [{"condition": {"styleKey": "idle_node"}, "duration": 500}], "annotations": [{"condition": {"op": "updateNodeStyle"}, "text": "处理中...", "position": "top"}]}}, "model_output": {"algorithm_id": "insertion_sort", "data_input": [20, 16, 29, 45, 6, 90, 83, 25], "style_overrides": {"elementStyles": {"swapping": {"fill": "#4bd32c", "stroke": "#1191b3", "strokeWidth": 2.5}, "shifting": {"fill": "#4bd32c", "stroke": "#1191b3", "strokeWidth": 2.5}}, "variableStyles": {}, "tempStyles": {}, "commentStyles": {}, "animationStyles": {}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"styleKey": "idle_node"}, "duration": 500}], "annotations": [{"condition": {"op": "updateNodeStyle"}, "text": "处理中...", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想用插入排序来演示数组 [90, 44, 77, 17, 78] 的排序过程。", "style_instruction": "无特殊要求", "control_instruction": "每次有元素移动的时候，给我停大概1.5秒左右。"}, "gold_standard_output": {"algorithm_id": "insertion_sort", "data_input": [90, 44, 77, 17, 78], "style_overrides": {}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1500}]}}, "model_output": {"algorithm_id": "insertion_sort", "data_input": [90, 44, 77, 17, 78], "style_overrides": {}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "moveElements"}, "duration": 1500}], "annotations": []}}}
{"user_input": {"core_instruction": "我想对字符串 \"CTGGAG\" 和 \"TCTGGTA\" 使用最长公共子序列算法做可视化。", "style_instruction": "把 shifting 元素的填充色设为 #1970a7，描边用 #499b1e、宽度3px；pivot 元素填充 #f9a7b1，描边 #6fada2、宽度2.5px；默认移动动画的时长调成 750 毫秒。", "control_instruction": "当元素标记为 sorted 时暂停 1.5 秒；另外每次执行 shiftElements 操作时，在元素上方显示“交换”的注释。"}, "gold_standard_output": {"algorithm_id": "lcs", "data_input": {"str1": "CTGGAG", "str2": "TCTGGTA"}, "style_overrides": {"elementStyles": {"shifting": {"fill": "#1970a7", "stroke": "#499b1e", "strokeWidth": 3}, "pivot": {"fill": "#f9a7b1", "stroke": "#6fada2", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"styleKey": "sorted"}, "duration": 1500}], "annotations": [{"condition": {"op": "shiftElements"}, "text": "交换", "position": "top"}]}}, "model_output": {"algorithm_id": "lcs", "data_input": {"str1": "CTGGAG", "str2": "TCTGGTA"}, "style_overrides": {"elementStyles": {"shifting": {"fill": "#1970a7", "stroke": "#499b1e", "strokeWidth": 3}, "pivot": {"fill": "#f9a7b1", "stroke": "#6fada2", "strokeWidth": 2.5}}, "variableStyles": {}, "tempStyles": {}, "commentStyles": {}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"styleKey": "sorted"}, "duration": 1500}], "annotations": [{"condition": {"op": "shiftElements"}, "text": "交换", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看Prim算法如何从节点A开始在这张无向加权图上一步步构建最小生成树，图中边权是A-B=13、A-C=8、B-C=7、B-E=7、B-F=8、E-F=1、F-D=2和3。", "style_instruction": "无特殊要求", "control_instruction": "每次节点样式更新后暂停大约1.5秒，并且当节点被标记为已排序时，在它的上方显示“下一步”的注释。"}, "gold_standard_output": {"algorithm_id": "prim", "data_input": {"graph": {"A": [["B", 13], ["C", 8]], "B": [["A", 13], ["F", 8], ["E", 7], ["C", 7]], "F": [["B", 8], ["E", 1], ["D", 2], ["D", 3]], "E": [["F", 1], ["B", 7]], "D": [["F", 2], ["F", 3]], "C": [["A", 8], ["B", 7]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1500}], "annotations": [{"condition": {"styleKey": "sorted"}, "text": "下一步", "position": "top"}]}}, "model_output": {"algorithm_id": "prim", "data_input": {"graph": {"A": [["B", 13], ["C", 8]], "B": [["A", 13], ["C", 7], ["E", 7], ["F", 8]], "C": [["A", 8], ["B", 7]], "E": [["B", 7], ["F", 1]], "F": [["B", 8], ["E", 1], ["D", 2], ["D", 3]], "D": [["F", 2], ["F", 3]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1500}], "annotations": [{"condition": {"styleKey": "sorted"}, "text": "下一步", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看一个快速排序的可视化，数据是 [88, 12, 7, 57, 35, 19, 95, 51, 93]。", "style_instruction": "把枢轴元素（pivot）填充成亮蓝色 #0595f0，边框用粉紫色 #cb0fe0，描边宽度设置为2；所有元素移动的动画时长改成0.75秒。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [88, 12, 7, 57, 35, 19, 95, 51, 93], "style_overrides": {"elementStyles": {"pivot": {"fill": "#0595f0", "stroke": "#cb0fe0", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [88, 12, 7, 57, 35, 19, 95, 51, 93], "style_overrides": {"elementStyles": {"pivot": {"fill": "#0595f0", "stroke": "#cb0fe0", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看到用Prim算法生成最小生成树的动画，图的节点有A、B、C、D、E，边的权重分别是A-B(14)、B-E(9)、B-E(5)、B-C(18)、E-D(8)、E-C(16)、C-D(12)，并且从A节点开始。", "style_instruction": "把当前作为候选的pivot节点填充设为#5b5eb2，描边用#c498a4、宽度2.5；已经加入树中的in_path_node节点填充#dfa4fb，描边#b35d86、宽度2。", "control_instruction": "每次有样式更新（updateStyle）时，在元素上方标注“交换”。"}, "gold_standard_output": {"algorithm_id": "prim", "data_input": {"graph": {"B": [["E", 9], ["A", 14], ["E", 5], ["C", 18]], "E": [["B", 9], ["B", 5], ["D", 8], ["C", 16]], "D": [["C", 12], ["E", 8]], "C": [["D", 12], ["B", 18], ["E", 16]], "A": [["B", 14]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"pivot": {"fill": "#5b5eb2", "stroke": "#c498a4", "strokeWidth": 2.5}, "in_path_node": {"fill": "#dfa4fb", "stroke": "#b35d86", "strokeWidth": 2}}}, "control_object": {"annotations": [{"condition": {"op": "updateStyle"}, "text": "交换", "position": "top"}]}}, "model_output": {"algorithm_id": "prim", "data_input": {"graph": {"A": [["B", 14]], "B": [["A", 14], ["E", 9], ["E", 5], ["C", 18]], "C": [["B", 18], ["E", 16], ["D", 12]], "D": [["E", 8], ["C", 12]], "E": [["B", 9], ["B", 5], ["D", 8], ["C", 16]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"pivot": {"fill": "#5b5eb2", "stroke": "#c498a4", "strokeWidth": 2.5}, "in_path_node": {"fill": "#dfa4fb", "stroke": "#b35d86", "strokeWidth": 2}}}, "control_object": {"annotations": [{"condition": {"op": "updateStyle"}, "text": "交换", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看一段快速排序的可视化，数据是 [94, 11, 60, 77, 22, 6, 8, 40, 80]。", "style_instruction": "把普通连线(normal_edge)都画成 #67b490，线宽3px；将路径中的节点(in_path_node)填充为 #cff4a6，描边为 #40d6bb，线宽2px。并且把默认的移动动画速度设为250毫秒。", "control_instruction": "每当元素移动时，都停顿1.5秒，让我看清楚。"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [94, 11, 60, 77, 22, 6, 8, 40, 80], "style_overrides": {"elementStyles": {"normal_edge": {"color": "#67b490", "strokeWidth": 3}, "in_path_node": {"fill": "#cff4a6", "stroke": "#40d6bb", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1500}]}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [94, 11, 60, 77, 22, 6, 8, 40, 80], "style_overrides": {"elementStyles": {"normal_edge": {"color": "#67b490", "strokeWidth": 3}, "in_path_node": {"fill": "#cff4a6", "stroke": "#40d6bb", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1500}]}}}
{"user_input": {"core_instruction": "我想看 Bellman-Ford 算法的可视化，起点是 A，图的边有 A->D(6)、D->B(10)、D->C(3)、D->C(18)、E->C(9)、E->B(9) 和 B->C(13)。", "style_instruction": "无特殊要求", "control_instruction": "当节点被标记为 sorted（已确定最短路径）时，在节点上方显示“找到了!”的注释。"}, "gold_standard_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"D": [["B", 10], ["C", 3], ["C", 18]], "E": [["C", 9], ["B", 9]], "B": [["C", 13]], "A": [["D", 6]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {"annotations": [{"condition": {"styleKey": "sorted"}, "text": "找到了!", "position": "top"}]}}, "model_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"A": [["D", 6]], "D": [["B", 10], ["C", 3], ["C", 18]], "E": [["C", 9], ["B", 9]], "B": [["C", 13]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {"annotations": [{"condition": {"styleKey": "sorted"}, "text": "找到了!", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想用堆排序来处理这组数据 [73, 35, 94, 31, 38, 81, 75, 50]，完整展示从建堆到排序完成的每一步。", "style_instruction": "把普通边(normal_edge)渲染成柔和的云雾蓝(#9ce0ea)，线宽调成2像素；元素移动时的动画过渡设为1秒钟。", "control_instruction": "每当出现标记为 pivot 的步骤，就暂停大约0.5秒再继续。"}, "gold_standard_output": {"algorithm_id": "heap_sort", "data_input": [73, 35, 94, 31, 38, 81, 75, 50], "style_overrides": {"elementStyles": {"normal_edge": {"color": "#9ce0ea", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"pauses": [{"condition": {"styleKey": "pivot"}, "duration": 500}]}}, "model_output": {"algorithm_id": "heap_sort", "data_input": [73, 35, 94, 31, 38, 81, 75, 50], "style_overrides": {"elementStyles": {"normal_edge": {"color": "#9ce0ea", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"pauses": [{"condition": {"styleKey": "pivot"}, "duration": 500}]}}}
{"user_input": {"core_instruction": "请可视化 Bellman-Ford 算法，在下图里找出从 A 节点开始到其他节点的最短路径：有节点 A、B、C、D、E、F，边的权重是 D→E=4、D→C=16、F→E=4、F→A=2、C→F=10、C→B=4、B→A=11 和 B→A=19。", "style_instruction": "把所有普通边都用深紫色（#5827e8）、线宽 3 来显示；当边被更新或松弛（swapping）时，填充成淡蓝色（#7fb8f4），描边用青绿色（#08b2c7），线宽同样设为 3。", "control_instruction": "每次发生元素移动（moveElements）时，都暂停大概 1 秒（1000 毫秒），让我有时间看清楚每一步。"}, "gold_standard_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"D": [["E", 4], ["C", 16]], "F": [["E", 4], ["A", 2]], "C": [["F", 10], ["B", 4]], "B": [["A", 11], ["A", 19]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"normal_edge": {"color": "#5827e8", "strokeWidth": 3}, "swapping": {"fill": "#7fb8f4", "stroke": "#08b2c7", "strokeWidth": 3}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1000}]}}, "model_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"D": [["E", 4], ["C", 16]], "F": [["E", 4], ["A", 2]], "C": [["F", 10], ["B", 4]], "B": [["A", 11], ["A", 19]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"normal_edge": {"color": "#5827e8", "strokeWidth": 3}, "swapping": {"fill": "#7fb8f4", "stroke": "#08b2c7", "strokeWidth": 3}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "moveElements"}, "duration": 1000}], "annotations": []}}}
{"user_input": {"core_instruction": "请演示Kruskal算法在以下带权无向图上运行：节点有A、C、D、E、F，边及其权重分别是D–F(12)、D–E(12)、D–C(11)、D–A(10)、C–A(7)、A–D(3)、C–D(2)、C–A(2)。", "style_instruction": "无特殊要求", "control_instruction": "每当展示普通边(normal_edge)时暂停大约1秒；当边状态变为swapping时，在顶部显示“交换”"}, "gold_standard_output": {"algorithm_id": "kruskal", "data_input": {"graph": {"D": [["F", 12], ["E", 12], ["C", 11], ["A", 10], ["C", 2], ["A", 3]], "F": [["D", 12]], "E": [["D", 12]], "C": [["D", 11], ["A", 7], ["D", 2], ["A", 2]], "A": [["D", 10], ["C", 7], ["D", 3], ["C", 2]]}}, "style_overrides": {}, "control_object": {"pauses": [{"condition": {"styleKey": "normal_edge"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "swapping"}, "text": "交换", "position": "top"}]}}, "model_output": {"algorithm_id": "kruskal", "data_input": {"graph": {"A": [["D", 10], ["D", 3], ["C", 7], ["C", 2]], "C": [["D", 11], ["D", 2], ["A", 7], ["A", 2]], "D": [["F", 12], ["E", 12], ["C", 11], ["A", 10], ["A", 3], ["C", 2]], "E": [["D", 12]], "F": [["D", 12]]}}, "style_overrides": {}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"styleKey": "normal_edge"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "swapping"}, "text": "交换", "position": "top"}]}}}
{"user_input": {"core_instruction": "帮我用插入排序把数组 [22, 47, 60, 14, 48, 20, 41, 72] 做可视化演示，每一步都展示清楚。", "style_instruction": "把遍历过的边渲染成淡淡的紫粉色（#bc7e95），线条宽度调到3，并且默认的移动动画放慢点，每次移动持续750毫秒。", "control_instruction": "每当进入比较（compare）状态就停留1.5秒；同时在处于空闲（idle_node）的节点上方标注“下一步”。"}, "gold_standard_output": {"algorithm_id": "insertion_sort", "data_input": [22, 47, 60, 14, 48, 20, 41, 72], "style_overrides": {"elementStyles": {"traversed_edge": {"color": "#bc7e95", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"styleKey": "compare"}, "duration": 1500}], "annotations": [{"condition": {"styleKey": "idle_node"}, "text": "下一步", "position": "top"}]}}, "model_output": {"algorithm_id": "insertion_sort", "data_input": [22, 47, 60, 14, 48, 20, 41, 72], "style_overrides": {"elementStyles": {"traversed_edge": {"color": "#bc7e95", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"styleKey": "compare"}, "duration": 1500}], "annotations": [{"condition": {"styleKey": "idle_node"}, "text": "下一步", "position": "top"}]}}}
{"user_input": {"core_instruction": "演示一次选择排序，处理以下数组： [61, 89, 74, 85, 2, 27, 76, 78, 92, 40]。", "style_instruction": "把每轮选中的枢轴元素用紫色（#c757f1）高亮，给它加一个绿色边框（#097c1b），描边粗细设为3px；所有元素的移动动画速度调快一点，每次移动耗时0.25秒。", "control_instruction": "每当有元素移动时，自动暂停1秒再继续；当子数组处于活动状态时，在它上方显示“下一步”提示。"}, "gold_standard_output": {"algorithm_id": "selection_sort", "data_input": [61, 89, 74, 85, 2, 27, 76, 78, 92, 40], "style_overrides": {"elementStyles": {"pivot": {"fill": "#c757f1", "stroke": "#097c1b", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "sub_array_active"}, "text": "下一步", "position": "top"}]}}, "model_output": {"algorithm_id": "selection_sort", "data_input": [61, 89, 74, 85, 2, 27, 76, 78, 92, 40], "style_overrides": {"elementStyles": {"pivot": {"fill": "#c757f1", "stroke": "#097c1b", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "sub_array_active"}, "text": "下一步", "position": "top"}]}}}
{"user_input": {"core_instruction": "请帮我用冒泡排序对数组 [65, 79, 82, 66, 2, 54] 做一次可视化演示，展示每一趟比较和交换的过程。", "style_instruction": "把每个被访问过的节点填充成柔和的玫瑰粉（#d86a84），边框用橙红色（#e65105），线宽调到2.5；同时每次作为枢轴的元素用深灰蓝（#12222f）填充，配上几乎黑的边框（#010c1c），线条粗细2。", "control_instruction": "每当有一条遍历的连线出现，就停下来大概1.5秒再继续。"}, "gold_standard_output": {"algorithm_id": "bubble_sort", "data_input": [65, 79, 82, 66, 2, 54], "style_overrides": {"elementStyles": {"visited_node": {"fill": "#d86a84", "stroke": "#e65105", "strokeWidth": 2.5}, "pivot": {"fill": "#12222f", "stroke": "#010c1c", "strokeWidth": 2}}}, "control_object": {"pauses": [{"condition": {"styleKey": "traversed_edge"}, "duration": 1500}]}}, "model_output": {"algorithm_id": "bubble_sort", "data_input": [65, 79, 82, 66, 2, 54], "style_overrides": {"elementStyles": {"visited_node": {"fill": "#d86a84", "stroke": "#e65105", "strokeWidth": 2.5}, "pivot": {"fill": "#12222f", "stroke": "#010c1c", "strokeWidth": 2}}}, "control_object": {"pauses": [{"condition": {"styleKey": "traversed_edge"}, "duration": 1500}]}}}
{"user_input": {"core_instruction": "请用拓扑排序对节点序列 [83, 75, 59, 32, 5] 进行可视化，展示整个排序过程。", "style_instruction": "元素交换时用亮蓝色填充（#2687ec），配深色描边（#9e7074），描边宽度设为2px；同时把默认的移动动画时长改成750毫秒。", "control_instruction": "每当遍历到一条路径边（in_path_edge）时，都暂停1.5秒再继续。"}, "gold_standard_output": {"algorithm_id": "topological_sort", "data_input": [83, 75, 59, 32, 5], "style_overrides": {"elementStyles": {"swapping": {"fill": "#2687ec", "stroke": "#9e7074", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"styleKey": "in_path_edge"}, "duration": 1500}]}}, "model_output": {"algorithm_id": "topological_sort", "data_input": [83, 75, 59, 32, 5], "style_overrides": {"elementStyles": {"swapping": {"fill": "#2687ec", "stroke": "#9e7074", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"styleKey": "in_path_edge"}, "duration": 1500}]}}}
{"user_input": {"core_instruction": "请用 Bellman-Ford 算法可视化下面这个有向图，从起点 A 开始：B 节点有边到 E（权重11）、A（14）和 C（12）；C 节点有两条到 A 的边，权重分别是6和9；E 节点到 A 的边权重16；A 到 F 的边权重1；D 到 E 的边权重12。", "style_instruction": "把每一条被遍历的边（traversed_edge）的颜色改成紫红色（#d064ce），线条粗一点，宽度设为3。", "control_instruction": "每次触发 updateNodeStyle 操作的时候，动画暂停1.5秒；同时，当一个节点被标记为 visited_node 时，就在它的上方冒出“找到了!”的标注。"}, "gold_standard_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"B": [["E", 11], ["A", 14], ["C", 12]], "C": [["A", 6], ["A", 9]], "E": [["A", 16]], "A": [["F", 1]], "D": [["E", 12]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"traversed_edge": {"color": "#d064ce", "strokeWidth": 3}}}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1500}], "annotations": [{"condition": {"styleKey": "visited_node"}, "text": "找到了!", "position": "top"}]}}, "model_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"B": [["E", 11], ["A", 14], ["C", 12]], "C": [["A", 6], ["A", 9]], "E": [["A", 16]], "A": [["F", 1]], "D": [["E", 12]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"traversed_edge": {"color": "#d064ce", "strokeWidth": 3}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1500}], "annotations": [{"condition": {"styleKey": "visited_node"}, "text": "找到了!", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看一下拓扑排序的可视化演示，节点数据是 [81, 26, 21, 74, 88, 37, 48, 79, 45]。", "style_instruction": "把当前正在比较的节点填充成深蓝色（#085989），并用酒红色（#660f09）的3像素描边突出显示。", "control_instruction": "每次元素移动时都暂停一秒钟；每当节点样式更新，就在节点上方显示“处理中...”的注释。"}, "gold_standard_output": {"algorithm_id": "topological_sort", "data_input": [81, 26, 21, 74, 88, 37, 48, 79, 45], "style_overrides": {"elementStyles": {"compare": {"fill": "#085989", "stroke": "#660f09", "strokeWidth": 3}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1000}], "annotations": [{"condition": {"op": "updateNodeStyle"}, "text": "处理中...", "position": "top"}]}}, "model_output": {"algorithm_id": "topological_sort", "data_input": {"graph": {"81": [], "26": [], "21": [], "74": [], "88": [], "37": [], "48": [], "79": [], "45": []}}, "style_overrides": {"elementStyles": {"compare": {"fill": "#085989", "stroke": "#660f09", "strokeWidth": 3}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "moveElements"}, "duration": 1000}], "annotations": [{"condition": {"op": "updateNodeStyle"}, "text": "处理中...", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看一下堆排序（heap_sort）的可视化，数据就是 [90, 62, 51, 58, 35]。", "style_instruction": "当两个元素在比较时，把它们的节点填充成深蓝色（#3149f7），再用粗红色（#b61434，宽度3）描边；其余的普通树边用金黄色（#f7c535）细描边，宽度2。", "control_instruction": "每次更新样式的时候停一秒钟；每当有元素移动，就在画面顶部弹出“处理中...”的提示。"}, "gold_standard_output": {"algorithm_id": "heap_sort", "data_input": [90, 62, 51, 58, 35], "style_overrides": {"elementStyles": {"compare": {"fill": "#3149f7", "stroke": "#b61434", "strokeWidth": 3}, "normal_edge": {"color": "#f7c535", "strokeWidth": 2}}}, "control_object": {"pauses": [{"condition": {"op": "updateStyle"}, "duration": 1000}], "annotations": [{"condition": {"op": "moveElements"}, "text": "处理中...", "position": "top"}]}}, "model_output": {"algorithm_id": "heap_sort", "data_input": [90, 62, 51, 58, 35], "style_overrides": {"elementStyles": {"compare": {"fill": "#3149f7", "stroke": "#b61434", "strokeWidth": 3}, "normal_edge": {"color": "#f7c535", "strokeWidth": 2}}, "variableStyles": {}, "tempStyles": {}, "commentStyles": {}, "animationStyles": {}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "updateStyle"}, "duration": 1000}], "annotations": [{"condition": {"op": "moveElements"}, "text": "处理中...", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想用堆排序来可视化这组数据 [78, 11, 57, 50, 1, 49, 71, 84]，从建堆到整个排序过程都展示出来。", "style_instruction": "交换时，把元素填成深绿色（#618504），用棕色边框（#725033），边框宽度1.5；枢轴节点用青蓝色（#45adc0）填充，搭配紫色描边（#4c186b），描边宽度2.5。同时，所有元素移动的动画保持每步250毫秒的节奏。", "control_instruction": "每当样式更新的时候，就暂停一下，大概1.5秒，让我好好欣赏效果。"}, "gold_standard_output": {"algorithm_id": "heap_sort", "data_input": [78, 11, 57, 50, 1, 49, 71, 84], "style_overrides": {"elementStyles": {"swapping": {"fill": "#618504", "stroke": "#725033", "strokeWidth": 1.5}, "pivot": {"fill": "#45adc0", "stroke": "#4c186b", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"pauses": [{"condition": {"op": "updateStyle"}, "duration": 1500}]}}, "model_output": {"algorithm_id": "heap_sort", "data_input": [78, 11, 57, 50, 1, 49, 71, 84], "style_overrides": {"elementStyles": {"swapping": {"fill": "#618504", "stroke": "#725033", "strokeWidth": 1.5}, "pivot": {"fill": "#45adc0", "stroke": "#4c186b", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"type": "ease-in-out", "duration": 250}}}, "control_object": {"pauses": [{"condition": {"op": "updateStyle"}, "duration": 1500}]}}}
{"user_input": {"core_instruction": "我想展示 Bellman-Ford 算法在一个有向图上的最短路径演示：起点是 A，图中有 A→C（权重19），C→D 三条边，权重分别是14、15和9，还有 C→A（11），以及 D→B（5）。", "style_instruction": "无特殊要求", "control_instruction": "每当节点样式更新的时候，停顿大约0.5秒。"}, "gold_standard_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"D": [["B", 5]], "C": [["D", 14], ["D", 15], ["D", 9], ["A", 11]], "A": [["C", 19]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 500}]}}, "model_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"A": [["C", 19]], "C": [["D", 14], ["D", 15], ["D", 9], ["A", 11]], "D": [["B", 5]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 500}], "annotations": []}}}
{"user_input": {"core_instruction": "我想要一个冒泡排序的可视化动画，数据是 [16, 61, 52, 46, 4, 81, 63, 62]。", "style_instruction": "让正在比较或移动的元素（in_path_node）填充淡粉色 (#e594dd)，红色描边 (#dd0734)，线宽 1.5；把子数组活动范围内的元素（sub_array_active）填充青绿色 (#32c4ab)，深绿色描边 (#0c893a)，线宽 1.5；所有元素的移动动画时长都设为 250 毫秒。", "control_instruction": "当元素处于 idle_node 状态时，每次暂停 1.5 秒；并且在所有 in_path_node 元素上方标注“处理中...”。"}, "gold_standard_output": {"algorithm_id": "bubble_sort", "data_input": [16, 61, 52, 46, 4, 81, 63, 62], "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#e594dd", "stroke": "#dd0734", "strokeWidth": 1.5}, "sub_array_active": {"fill": "#32c4ab", "stroke": "#0c893a", "strokeWidth": 1.5}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"pauses": [{"condition": {"styleKey": "idle_node"}, "duration": 1500}], "annotations": [{"condition": {"styleKey": "in_path_node"}, "text": "处理中...", "position": "top"}]}}, "model_output": {"algorithm_id": "bubble_sort", "data_input": [16, 61, 52, 46, 4, 81, 63, 62], "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#e594dd", "stroke": "#dd0734", "strokeWidth": 1.5}, "sub_array_active": {"fill": "#32c4ab", "stroke": "#0c893a", "strokeWidth": 1.5}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"pauses": [{"condition": {"styleKey": "idle_node"}, "duration": 1500}], "annotations": [{"condition": {"styleKey": "in_path_node"}, "text": "处理中...", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想用选择排序来处理数组 [11, 19, 2, 73, 76, 92, 63, 45, 23, 69]。", "style_instruction": "把被选中加入路径的节点(in_path_node)用柔和的淡紫色(#cc5bd2)填充，边框用灰棕色(#866767)加粗到3px；把正在比较的节点(compare)显示成深紫色(#6611f5)，用玫红(#aa0974)描边，线宽2.5px。", "control_instruction": "每当元素移动(moveElements)时就停1.5秒；每次更新节点样式(updateNodeStyle)时，在画面顶部弹出“处理中...”的注解。"}, "gold_standard_output": {"algorithm_id": "selection_sort", "data_input": [11, 19, 2, 73, 76, 92, 63, 45, 23, 69], "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#cc5bd2", "stroke": "#866767", "strokeWidth": 3}, "compare": {"fill": "#6611f5", "stroke": "#aa0974", "strokeWidth": 2.5}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1500}], "annotations": [{"condition": {"op": "updateNodeStyle"}, "text": "处理中...", "position": "top"}]}}, "model_output": {"algorithm_id": "selection_sort", "data_input": [11, 19, 2, 73, 76, 92, 63, 45, 23, 69], "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#cc5bd2", "stroke": "#866767", "strokeWidth": 3}, "compare": {"fill": "#6611f5", "stroke": "#aa0974", "strokeWidth": 2.5}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1500}], "annotations": [{"condition": {"op": "updateNodeStyle"}, "text": "处理中...", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想用Kruskal算法在这个无向加权图上演示最小生成树：节点有A、B、C、D、E，边的权重分别是E–B 12和10、E–A 8、B–A 18、B–C 11、A–D 18和4。", "style_instruction": "无特殊要求", "control_instruction": "每当一个节点被标记为生成树的一部分时，就暂停大约1.5秒。"}, "gold_standard_output": {"algorithm_id": "kruskal", "data_input": {"graph": {"E": [["B", 12], ["B", 10], ["A", 8]], "B": [["E", 12], ["A", 18], ["E", 10], ["C", 11]], "A": [["B", 18], ["D", 18], ["D", 4], ["E", 8]], "D": [["A", 18], ["A", 4]], "C": [["B", 11]]}}, "style_overrides": {}, "control_object": {"pauses": [{"condition": {"styleKey": "in_path_node"}, "duration": 1500}]}}, "model_output": {"algorithm_id": "kruskal", "data_input": {"graph": {"A": [["E", 8], ["B", 18], ["D", 18], ["D", 4]], "B": [["E", 12], ["E", 10], ["A", 18], ["C", 11]], "C": [["B", 11]], "D": [["A", 18], ["A", 4]], "E": [["B", 12], ["B", 10], ["A", 8]]}}, "style_overrides": {}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "updateNodeStyle", "styleKey": "visited_node"}, "duration": 1500}], "annotations": []}}}
{"user_input": {"core_instruction": "我想用 Bellman-Ford 算法在下面这个有向图上求最短路径：边有 A→C 权重8，C→B 权重16，C→D 权重9，D→A 权重1，D→B 权重7 和另一条 D→B 权重13，从起点 A 开始遍历。", "style_instruction": "给每一次作为当前松弛基准的节点（pivot）一个深紫红色的填充（#5b0f27），边框用亮粉紫（#fe71e3），宽度设为1.5，以突出显示。", "control_instruction": "无特殊要求"}, "gold_standard_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"C": [["B", 16], ["D", 9]], "A": [["C", 8]], "D": [["A", 1], ["B", 7], ["B", 13]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"pivot": {"fill": "#5b0f27", "stroke": "#fe71e3", "strokeWidth": 1.5}}}, "control_object": {}}, "model_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"A": [["C", 8]], "C": [["B", 16], ["D", 9]], "D": [["A", 1], ["B", 7], ["B", 13]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"pivot": {"fill": "#5b0f27", "stroke": "#fe71e3", "strokeWidth": 1.5}}}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看一次对数组 [81, 82, 29, 46, 44, 97] 的堆排序可视化演示。", "style_instruction": "把默认的元素移动动画放慢一点，每次移动持续大概750毫秒。", "control_instruction": "每当出现 idle_node 样式的节点时，就暂停动画1秒钟。"}, "gold_standard_output": {"algorithm_id": "heap_sort", "data_input": [81, 82, 29, 46, 44, 97], "style_overrides": {"animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"styleKey": "idle_node"}, "duration": 1000}]}}, "model_output": {"algorithm_id": "heap_sort", "data_input": [81, 82, 29, 46, 44, 97], "style_overrides": {"animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"styleKey": "idle_node"}, "duration": 1000}]}}}
{"user_input": {"core_instruction": "请对这个带权图进行一次深度优先搜索，从节点 A 开始。图的连接关系和权重是：A–C(17)、A–C(17)、A–E(2)、A–C(14)；C–A(17)、C–A(17)、C–E(1)、C–A(14)；B–E(19)、B–F(2)、B–F(7)；E–B(19)、E–A(2)、E–C(1)；F–B(2)、F–B(7)。", "style_instruction": "无特殊要求", "control_instruction": "在每次样式更新时，在可视化顶部显示一行注释“处理中...”以提示当前操作。"}, "gold_standard_output": {"algorithm_id": "dfs", "data_input": {"graph": {"A": [["C", 17], ["C", 17], ["E", 2], ["C", 14]], "C": [["A", 17], ["A", 17], ["E", 1], ["A", 14]], "B": [["E", 19], ["F", 2], ["F", 7]], "E": [["B", 19], ["A", 2], ["C", 1]], "F": [["B", 2], ["B", 7]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {"annotations": [{"condition": {"op": "updateStyle"}, "text": "处理中...", "position": "top"}]}}, "model_output": {"algorithm_id": "dfs", "data_input": {"graph": {"A": [["C", 17], ["C", 17], ["E", 2], ["C", 14]], "C": [["A", 17], ["A", 17], ["E", 1], ["A", 14]], "B": [["E", 19], ["F", 2], ["F", 7]], "E": [["B", 19], ["A", 2], ["C", 1]], "F": [["B", 2], ["B", 7]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {"annotations": [{"condition": {"op": "updateStyle"}, "text": "处理中...", "position": "top"}]}}}
{"user_input": {"core_instruction": "请用广度优先搜索从 A 开始遍历这张带权图，边信息是 F<->C 权重10，F<->D 权重1，C<->A 权重4 和15，A<->D 权重19 和11，D<->B 权重8，D<->E 权重11。", "style_instruction": "把搜索路径上的边显示成嫩绿色（#baf2d7），线宽为3，且移动元素的动画时长统一设为750毫秒。", "control_instruction": "每次有元素移动都暂停1.5秒，并且路径边出现时在它上方显示“处理中...”的注释。"}, "gold_standard_output": {"algorithm_id": "bfs", "data_input": {"graph": {"F": [["C", 10], ["D", 1]], "C": [["F", 10], ["A", 4], ["A", 15]], "A": [["C", 4], ["C", 15], ["D", 19], ["D", 11]], "D": [["B", 8], ["A", 19], ["E", 11], ["A", 11], ["F", 1]], "B": [["D", 8]], "E": [["D", 11]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"in_path_edge": {"color": "#baf2d7", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1500}], "annotations": [{"condition": {"styleKey": "in_path_edge"}, "text": "处理中...", "position": "top"}]}}, "model_output": {"algorithm_id": "bfs", "data_input": {"graph": {"F": [["C", 10], ["D", 1]], "C": [["F", 10], ["A", 4], ["A", 15]], "D": [["F", 1], ["A", 19], ["A", 11], ["B", 8], ["E", 11]], "A": [["C", 4], ["C", 15], ["D", 19], ["D", 11]], "B": [["D", 8]], "E": [["D", 11]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"in_path_edge": {"color": "#baf2d7", "strokeWidth": 3}}, "animationStyles": {"default_move": {"type": "ease-in-out", "duration": 750}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "moveElements"}, "duration": 1500}], "annotations": [{"condition": {"styleKey": "in_path_edge"}, "text": "处理中...", "position": "top"}]}}}
{"user_input": {"core_instruction": "帮我可视化编辑距离算法，演示字符串 \"CGCAC\" 和 \"GTTTTCCA\" 如何一步步计算最少编辑操作。", "style_instruction": "让我把普通连接边（normal_edge）染成棕褐色（#7f4e2d），线宽3px；空闲节点（idle_node）填充绿色（#29c851），边框用亮黄色（#fcf003），宽度2.5px；所有移动动画的默认时长都设为1秒。", "control_instruction": "每次触发 swapping 样式（styleKey 为 swapping）时暂停1秒；在执行 shiftElements 操作时，在节点上方显示“下一步”注释。"}, "gold_standard_output": {"algorithm_id": "edit_distance", "data_input": {"str1": "CGCAC", "str2": "GTTTTCCA"}, "style_overrides": {"elementStyles": {"normal_edge": {"color": "#7f4e2d", "strokeWidth": 3}, "idle_node": {"fill": "#29c851", "stroke": "#fcf003", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"pauses": [{"condition": {"styleKey": "swapping"}, "duration": 1000}], "annotations": [{"condition": {"op": "shiftElements"}, "text": "下一步", "position": "top"}]}}, "model_output": {"algorithm_id": "edit_distance", "data_input": {"str1": "CGCAC", "str2": "GTTTTCCA"}, "style_overrides": {"elementStyles": {"normal_edge": {"color": "#7f4e2d", "strokeWidth": 3}, "idle_node": {"fill": "#29c851", "stroke": "#fcf003", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"type": "ease-in-out", "duration": 1000}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"styleKey": "swapping"}, "duration": 1000}], "annotations": [{"condition": {"op": "shiftElements"}, "text": "下一步", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看一段快速排序的可视化，数据是 [5, 74, 82, 18, 71, 41]。", "style_instruction": "把所有空闲状态的节点（idle_node）填成淡青绿色 #9efbf6，边框用 #84fbf7，线宽设为3。", "control_instruction": "每次执行 shiftElements 操作时暂停1.5秒；每当 moveElements 发生时，在元素上方标注“交换”。"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [5, 74, 82, 18, 71, 41], "style_overrides": {"elementStyles": {"idle_node": {"fill": "#9efbf6", "stroke": "#84fbf7", "strokeWidth": 3}}}, "control_object": {"pauses": [{"condition": {"op": "shiftElements"}, "duration": 1500}], "annotations": [{"condition": {"op": "moveElements"}, "text": "交换", "position": "top"}]}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [5, 74, 82, 18, 71, 41], "style_overrides": {"elementStyles": {"idle_node": {"fill": "#9efbf6", "stroke": "#84fbf7", "strokeWidth": 3}}}, "control_object": {"pauses": [{"condition": {"op": "shiftElements"}, "duration": 1500}], "annotations": [{"condition": {"op": "moveElements"}, "text": "交换", "position": "top"}]}}}
{"user_input": {"core_instruction": "请可视化执行一遍冒泡排序，数据是 [10, 74, 55, 52, 72, 57, 3, 20, 61]。", "style_instruction": "把每次正在移动（shifting）的元素都填充成紫色 (#955bcc)，用绿色 (#05da66)的边框，线宽调到3；并且把默认的移动动画放慢一点，持续大概0.75秒。", "control_instruction": "每当更新节点样式时，停顿1秒钟；同时，当某个元素被标记为 shifting，就在它上方显示“找到了!”的标注。"}, "gold_standard_output": {"algorithm_id": "bubble_sort", "data_input": [10, 74, 55, 52, 72, 57, 3, 20, 61], "style_overrides": {"elementStyles": {"shifting": {"fill": "#955bcc", "stroke": "#05da66", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "shifting"}, "text": "找到了!", "position": "top"}]}}, "model_output": {"algorithm_id": "bubble_sort", "data_input": [10, 74, 55, 52, 72, 57, 3, 20, 61], "style_overrides": {"elementStyles": {"shifting": {"fill": "#955bcc", "stroke": "#05da66", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "shifting"}, "text": "找到了!", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看一下快速排序的可视化，数据是 [50, 12, 49, 5, 98, 63, 47, 55, 17]。", "style_instruction": "把所有 traversed_edge（遍历过的边）渲染成 #752162 的深紫色，线宽设为 1.5；同时把默认元素移动动画的时长调成 1000 毫秒，也就是1秒。", "control_instruction": "每当触发 shifting 样式时就暂停1秒；在执行 shiftElements 操作的时候，在图形的顶部弹出“找到了!”的注释。"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [50, 12, 49, 5, 98, 63, 47, 55, 17], "style_overrides": {"elementStyles": {"traversed_edge": {"color": "#752162", "strokeWidth": 1.5}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"pauses": [{"condition": {"styleKey": "shifting"}, "duration": 1000}], "annotations": [{"condition": {"op": "shiftElements"}, "text": "找到了!", "position": "top"}]}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [50, 12, 49, 5, 98, 63, 47, 55, 17], "style_overrides": {"elementStyles": {"traversed_edge": {"color": "#752162", "strokeWidth": 1.5}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"styleKey": "shifting"}, "duration": 1000}], "annotations": [{"condition": {"op": "shiftElements"}, "text": "找到了!", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看 Kruskal 算法的可视化演示，图里有 A、B、C、D 四个节点，边的权重分别是 A-B：8 和 3，B-D：6 和 16，A-D：13，C-D：5。", "style_instruction": "把最后选入最小生成树的边用粉紫色（#d378ed）标出，笔触宽度 2.5，其他普通边用青绿色（#71aa1c）、宽度也设置为 2.5，并把元素移动的动画时长统一设为 250 毫秒。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "kruskal", "data_input": {"graph": {"D": [["B", 6], ["B", 16], ["C", 5], ["A", 13]], "B": [["D", 6], ["A", 8], ["D", 16], ["A", 3]], "A": [["B", 8], ["B", 3], ["D", 13]], "C": [["D", 5]]}}, "style_overrides": {"elementStyles": {"in_path_edge": {"color": "#d378ed", "strokeWidth": 2.5}, "normal_edge": {"color": "#71aa1c", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {}}, "model_output": {"algorithm_id": "kruskal", "data_input": {"graph": {"A": [["B", 8], ["B", 3], ["D", 13]], "B": [["A", 8], ["A", 3], ["D", 6], ["D", 16]], "C": [["D", 5]], "D": [["A", 13], ["B", 6], ["B", 16], ["C", 5]]}}, "style_overrides": {"elementStyles": {"in_path_edge": {"color": "#d378ed", "strokeWidth": 2.5}, "normal_edge": {"color": "#71aa1c", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看一个快速排序的可视化演示，数据是 [62, 83, 27, 66, 41, 16, 25]。", "style_instruction": "空闲状态的节点用米黄色（#ecd797）填充，浅紫灰色（#ccc5dd）描边，描边宽度2；访问过的节点用深红色（#710506）填充，亮青色（#3bd7d8）描边，描边宽度2.5。", "control_instruction": "每当有元素移动时，就停顿大约1秒钟。"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [62, 83, 27, 66, 41, 16, 25], "style_overrides": {"elementStyles": {"idle_node": {"fill": "#ecd797", "stroke": "#ccc5dd", "strokeWidth": 2}, "visited_node": {"fill": "#710506", "stroke": "#3bd7d8", "strokeWidth": 2.5}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1000}]}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [62, 83, 27, 66, 41, 16, 25], "style_overrides": {"elementStyles": {"idle_node": {"fill": "#ecd797", "stroke": "#ccc5dd", "strokeWidth": 2}, "visited_node": {"fill": "#710506", "stroke": "#3bd7d8", "strokeWidth": 2.5}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1000}]}}}
{"user_input": {"core_instruction": "请用堆排序可视化数组 [56, 8, 4, 96, 19, 39, 34]。", "style_instruction": "无特殊要求", "control_instruction": "当元素的样式键是 pivot 时，在它上方显示“交换”这个注释。"}, "gold_standard_output": {"algorithm_id": "heap_sort", "data_input": [56, 8, 4, 96, 19, 39, 34], "style_overrides": {}, "control_object": {"annotations": [{"condition": {"styleKey": "pivot"}, "text": "交换", "position": "top"}]}}, "model_output": {"algorithm_id": "heap_sort", "data_input": [56, 8, 4, 96, 19, 39, 34], "style_overrides": {}, "control_object": {"speed_multiplier": 1.0, "pauses": [], "annotations": [{"condition": {"styleKey": "pivot"}, "text": "交换", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看一次快速排序的可视化，数据用 [28, 97, 74, 84, 38, 65, 89]。", "style_instruction": "把未被访问的节点填成 #b78ddc（柔和紫色），边框用 #d1bd28（明亮金黄），线宽2；遍历过的边高亮成 #8dd45c（清新绿），线宽2.5。", "control_instruction": "每当样式更新（updateStyle）就暂停0.5秒；当元素处于比较状态时，在它上方显示“下一步”的注释。"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [28, 97, 74, 84, 38, 65, 89], "style_overrides": {"elementStyles": {"idle_node": {"fill": "#b78ddc", "stroke": "#d1bd28", "strokeWidth": 2}, "traversed_edge": {"color": "#8dd45c", "strokeWidth": 2.5}}}, "control_object": {"pauses": [{"condition": {"op": "updateStyle"}, "duration": 500}], "annotations": [{"condition": {"styleKey": "compare"}, "text": "下一步", "position": "top"}]}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [28, 97, 74, 84, 38, 65, 89], "style_overrides": {"elementStyles": {"idle_node": {"fill": "#b78ddc", "stroke": "#d1bd28", "strokeWidth": 2}, "traversed_edge": {"color": "#8dd45c", "strokeWidth": 2.5}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "updateStyle"}, "duration": 500}], "annotations": [{"condition": {"styleKey": "compare"}, "text": "下一步", "position": "top"}]}}}
{"user_input": {"core_instruction": "可视化运行合并排序，数据是 [35, 89, 13, 97, 50, 40, 51]。", "style_instruction": "我想让合并路径里的节点填充成深绿色（#717804），描边用亮绿色（#24c016），描边宽度2.5px；同时，所有元素移动的动画默认都用1秒。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "merge_sort", "data_input": [35, 89, 13, 97, 50, 40, 51], "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#717804", "stroke": "#24c016", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {}}, "model_output": {"algorithm_id": "merge_sort", "data_input": [35, 89, 13, 97, 50, 40, 51], "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#717804", "stroke": "#24c016", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {}}}
{"user_input": {"core_instruction": "我想用 Dijkstra 算法在一张有四个节点 A、B、C、D 的带权图上可视化最短路径，起始节点设为 A，图中边的权重分别是：A-C=8、A-B=2、B-C=18，以及 C-D 有三条平行边，权重分别是 1、19、11。", "style_instruction": "把最终路径上的节点填充成粉紫色 (#d6b0c3)，描边用亮绿色 (#13ec77)，线宽设为 1.5，动画元素移动的默认时长调整为 1000 毫秒。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "dijkstra", "data_input": {"graph": {"C": [["A", 8], ["D", 1], ["D", 19], ["D", 11], ["B", 18]], "A": [["C", 8], ["B", 2]], "B": [["A", 2], ["C", 18]], "D": [["C", 1], ["C", 19], ["C", 11]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#d6b0c3", "stroke": "#13ec77", "strokeWidth": 1.5}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {}}, "model_output": {"algorithm_id": "dijkstra", "data_input": {"graph": {"A": [["C", 8], ["B", 2]], "B": [["A", 2], ["C", 18]], "C": [["A", 8], ["B", 18], ["D", 1], ["D", 19], ["D", 11]], "D": [["C", 1], ["C", 19], ["C", 11]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#d6b0c3", "stroke": "#13ec77", "strokeWidth": 1.5}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {}}}
{"user_input": {"core_instruction": "我想用深度优先搜索（DFS）遍历这个加权图，从节点A出发。图的边是：A–B 权重15，A–D 权重13；B–A 15、B–C 2、B–D 11 和 B–D 3；C–B 2、C–D 9；D–A 13、D–B 11、D–B 3、D–C 9。", "style_instruction": "无特殊要求", "control_instruction": "每当更新节点样式时，在该节点上方显示“处理中...”的文字注释。"}, "gold_standard_output": {"algorithm_id": "dfs", "data_input": {"graph": {"B": [["A", 15], ["C", 2], ["D", 11], ["D", 3]], "A": [["B", 15], ["D", 13]], "D": [["A", 13], ["B", 11], ["B", 3], ["C", 9]], "C": [["B", 2], ["D", 9]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {"annotations": [{"condition": {"op": "updateNodeStyle"}, "text": "处理中...", "position": "top"}]}}, "model_output": {"algorithm_id": "dfs", "data_input": {"graph": {"A": [["B", 15], ["D", 13]], "B": [["A", 15], ["C", 2], ["D", 11], ["D", 3]], "C": [["B", 2], ["D", 9]], "D": [["A", 13], ["B", 11], ["B", 3], ["C", 9]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {"speed_multiplier": 1.0, "pauses": [], "annotations": [{"condition": {"op": "updateNodeStyle"}, "text": "处理中...", "position": "top"}]}}}
{"user_input": {"core_instruction": "请用最长公共子序列（LCS）算法可视化对比字符串 “GGCAC” 和 “CGACCAT” 的整个动态过程。", "style_instruction": "把当前路径上的连边（in_path_edge）都染成深紫色（#41028e），线宽调到 2；把标记为 sorted 的格子填充深酒红色（#73071a），边框用浅棕色（#b3786b），同样线宽为 2；并且让所有元素移动动画都放慢点，每次移动持续 1 秒。", "control_instruction": "每次触发 swapping 样式的时候，就暂停 0.5 秒。"}, "gold_standard_output": {"algorithm_id": "lcs", "data_input": {"str1": "GGCAC", "str2": "CGACCAT"}, "style_overrides": {"elementStyles": {"in_path_edge": {"color": "#41028e", "strokeWidth": 2}, "sorted": {"fill": "#73071a", "stroke": "#b3786b", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"pauses": [{"condition": {"styleKey": "swapping"}, "duration": 500}]}}, "model_output": {"algorithm_id": "lcs", "data_input": {"str1": "GGCAC", "str2": "CGACCAT"}, "style_overrides": {"elementStyles": {"in_path_edge": {"color": "#41028e", "strokeWidth": 2}, "sorted": {"fill": "#73071a", "stroke": "#b3786b", "strokeWidth": 2}}, "animationStyles": {"default_move": {"type": "ease-in-out", "duration": 1000}}}, "control_object": {"pauses": [{"condition": {"styleKey": "swapping"}, "duration": 500}]}}}
{"user_input": {"core_instruction": "帮我把下面这个加权图用深度优先搜索可视化一遍，从节点 A 开始。图的数据结构是：A 连接 E(14)、C(16)、C(6)、F(12)；E 连接 A(14)、F(5)；C 连接 A(16)、F(4)、F(12)、A(6)、B(17)；F 连接 C(4)、C(12)、E(5)、A(12)；B 连接 C(17)。", "style_instruction": "把正在比较(compare)的节点用紫红色填充（#b938c6）、深绿色边框（#3b7733），边框宽度设为3px；同时把默认的移动动画(default_move)加快，每次只要250毫秒。", "control_instruction": "当节点变成空闲(idle_node)时就停下来1秒；每次发生元素移动(shiftElements)操作时，在画面顶部显示“处理中...”。"}, "gold_standard_output": {"algorithm_id": "dfs", "data_input": {"graph": {"A": [["E", 14], ["C", 16], ["C", 6], ["F", 12]], "E": [["A", 14], ["F", 5]], "C": [["A", 16], ["F", 4], ["F", 12], ["A", 6], ["B", 17]], "F": [["C", 4], ["C", 12], ["E", 5], ["A", 12]], "B": [["C", 17]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"compare": {"fill": "#b938c6", "stroke": "#3b7733", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"pauses": [{"condition": {"styleKey": "idle_node"}, "duration": 1000}], "annotations": [{"condition": {"op": "shiftElements"}, "text": "处理中...", "position": "top"}]}}, "model_output": {"algorithm_id": "dfs", "data_input": {"graph": {"A": [["E", 14], ["C", 16], ["C", 6], ["F", 12]], "E": [["A", 14], ["F", 5]], "C": [["A", 16], ["F", 4], ["F", 12], ["A", 6], ["B", 17]], "F": [["C", 4], ["C", 12], ["E", 5], ["A", 12]], "B": [["C", 17]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"compare": {"fill": "#b938c6", "stroke": "#3b7733", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"pauses": [{"condition": {"styleKey": "idle_node"}, "duration": 1000}], "annotations": [{"condition": {"op": "shiftElements"}, "text": "处理中...", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看一遍冒泡排序对数组 [1, 64, 14, 3, 65] 的完整可视化。", "style_instruction": "把处在 in_path_node 状态的节点填充成柔和的 #f2b778，描边用 #53766f，线条宽度调到 2.5。", "control_instruction": "每次遇到 styleKey 为 pivot 的节点时停一秒钟；当有元素进入 shifting 状态，就在它上方冒出“找到了!”的注释。"}, "gold_standard_output": {"algorithm_id": "bubble_sort", "data_input": [1, 64, 14, 3, 65], "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#f2b778", "stroke": "#53766f", "strokeWidth": 2.5}}}, "control_object": {"pauses": [{"condition": {"styleKey": "pivot"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "shifting"}, "text": "找到了!", "position": "top"}]}}, "model_output": {"algorithm_id": "bubble_sort", "data_input": [1, 64, 14, 3, 65], "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#f2b778", "stroke": "#53766f", "strokeWidth": 2.5}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"styleKey": "pivot"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "shifting"}, "text": "找到了!", "position": "top"}]}}}
{"user_input": {"core_instruction": "请帮我用Prim算法演示最小生成树的构建过程，从A节点开始。这个无向带权图有5个节点A、B、C、D、E，边的权重是：A-C有两条边，分别是2和9；A-E权重8；B-D权重12；B-E权重18；B-C权重13；C-E权重5。", "style_instruction": "把已选中的元素（sorted）的填充色设为#d93c01，描边颜色改成#8aec22、宽度2px；默认的移动动画持续0.25秒（250毫秒）。", "control_instruction": "每次执行元素移动（moveElements）后停顿1秒；并且当节点被标记为in_path_node时，在节点上方显示“交换”的注释。"}, "gold_standard_output": {"algorithm_id": "prim", "data_input": {"graph": {"B": [["E", 18], ["D", 12], ["C", 13]], "E": [["B", 18], ["C", 5], ["A", 8]], "D": [["B", 12]], "C": [["E", 5], ["A", 9], ["A", 2], ["B", 13]], "A": [["E", 8], ["C", 9], ["C", 2]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"sorted": {"fill": "#d93c01", "stroke": "#8aec22", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "in_path_node"}, "text": "交换", "position": "top"}]}}, "model_output": {"algorithm_id": "prim", "data_input": {"graph": {"A": [["C", 2], ["C", 9], ["E", 8]], "B": [["D", 12], ["E", 18], ["C", 13]], "C": [["A", 2], ["A", 9], ["E", 5], ["B", 13]], "D": [["B", 12]], "E": [["A", 8], ["B", 18], ["C", 5]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"sorted": {"fill": "#d93c01", "stroke": "#8aec22", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "moveElements"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "in_path_node"}, "text": "交换", "position": "top"}]}}}
{"user_input": {"core_instruction": "请用快速排序可视化这组数据 [85, 27, 60, 80, 32, 90, 91, 94]。", "style_instruction": "静止状态的节点填充色用#117486，描边色#48813a，描边宽度2；交换时的节点填充#576bba，描边#81012e，描边宽度2.5；移动动画每次用1秒完成。", "control_instruction": "每当元素移动时，顶部出现“处理中...”的提示。"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [85, 27, 60, 80, 32, 90, 91, 94], "style_overrides": {"elementStyles": {"idle_node": {"fill": "#117486", "stroke": "#48813a", "strokeWidth": 2}, "swapping": {"fill": "#576bba", "stroke": "#81012e", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"annotations": [{"condition": {"op": "moveElements"}, "text": "处理中...", "position": "top"}]}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [85, 27, 60, 80, 32, 90, 91, 94], "style_overrides": {"elementStyles": {"idle_node": {"fill": "#117486", "stroke": "#48813a", "strokeWidth": 2}, "swapping": {"fill": "#576bba", "stroke": "#81012e", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [], "annotations": [{"condition": {"op": "moveElements"}, "text": "处理中...", "position": "top"}]}}}
{"user_input": {"core_instruction": "请用堆排序处理数组 [8, 76, 84, 29, 19, 90, 52, 27]。", "style_instruction": "无特殊要求", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "heap_sort", "data_input": [8, 76, 84, 29, 19, 90, 52, 27], "style_overrides": {}, "control_object": {}}, "model_output": {"algorithm_id": "heap_sort", "data_input": [8, 76, 84, 29, 19, 90, 52, 27], "style_overrides": {}, "control_object": {}}}
{"user_input": {"core_instruction": "我想对下面这个带权图执行广度优先搜索，从 A 节点开始：图中 A 连到 B（7）和 C（18），B 连到 C（18）和 D（14），C 连到 D（11）、B（18）和 A（18），D 连到 C（11）和 B（14）。", "style_instruction": "把所有正在移动（shifting）的元素用柔和的薄荷绿 #80ab9a 填充，配上鲜亮的草绿色描边 #71c23a（描边宽度 2），并把默认移动动画的时长设为 1 秒。", "control_instruction": "每当发生元素平移（shiftElements）操作时，暂停 1.5 秒；当子数组处于激活状态（sub_array_active）时，在元素顶部显示“交换”的注释。"}, "gold_standard_output": {"algorithm_id": "bfs", "data_input": {"graph": {"C": [["D", 11], ["B", 18], ["A", 18], ["D", 11]], "D": [["C", 11], ["B", 14], ["C", 11]], "B": [["C", 18], ["A", 7], ["D", 14]], "A": [["B", 7], ["C", 18]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"shifting": {"fill": "#80ab9a", "stroke": "#71c23a", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"pauses": [{"condition": {"op": "shiftElements"}, "duration": 1500}], "annotations": [{"condition": {"styleKey": "sub_array_active"}, "text": "交换", "position": "top"}]}}, "model_output": {"algorithm_id": "bfs", "data_input": {"graph": {"A": [["B", 7], ["C", 18]], "B": [["C", 18], ["D", 14]], "C": [["D", 11], ["B", 18], ["A", 18]], "D": [["C", 11], ["B", 14]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"shifting": {"fill": "#80ab9a", "stroke": "#71c23a", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "shiftElements"}, "duration": 1500}], "annotations": [{"condition": {"styleKey": "sub_array_active"}, "text": "交换", "position": "top"}]}}}
{"user_input": {"core_instruction": "帮我用Kruskal算法对这个无向加权图做最小生成树的可视化：节点间的边和权重是 C-F:10、C-A:16；F-C:10、F-D:5、F-A:5；A-C:16、A-B:16、A-E:5（两条）、A-F:5；D-E:11、D-F:5；E-D:11、E-A:5（两条）；B-A:16。", "style_instruction": "把每条被选中或遍历过的边高亮成橙黄色（#dd8f0f），线条粗细调成2.5；默认的移动动画用0.75秒。", "control_instruction": "每次节点被标记为已访问时停顿0.5秒；每当发生元素移位（shiftElements）时，在顶部弹出“处理中...”的注释。"}, "gold_standard_output": {"algorithm_id": "kruskal", "data_input": {"graph": {"C": [["F", 10], ["A", 16]], "F": [["C", 10], ["D", 5], ["A", 5]], "A": [["C", 16], ["B", 16], ["E", 5], ["E", 5], ["F", 5]], "D": [["E", 11], ["F", 5]], "E": [["D", 11], ["A", 5], ["A", 5]], "B": [["A", 16]]}}, "style_overrides": {"elementStyles": {"traversed_edge": {"color": "#dd8f0f", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"styleKey": "visited_node"}, "duration": 500}], "annotations": [{"condition": {"op": "shiftElements"}, "text": "处理中...", "position": "top"}]}}, "model_output": {"algorithm_id": "kruskal", "data_input": {"graph": {"C": [["F", 10], ["A", 16]], "F": [["C", 10], ["D", 5], ["A", 5]], "A": [["C", 16], ["B", 16], ["E", 5], ["E", 5], ["F", 5]], "D": [["E", 11], ["F", 5]], "E": [["D", 11], ["A", 5], ["A", 5]], "B": [["A", 16]]}}, "style_overrides": {"elementStyles": {"traversed_edge": {"color": "#dd8f0f", "strokeWidth": 2.5}, "in_path_edge": {"color": "#dd8f0f", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"styleKey": "visited_node"}, "duration": 500}], "annotations": [{"condition": {"op": "shiftElements"}, "text": "处理中...", "position": "top"}]}}}
{"user_input": {"core_instruction": "请用编辑距离算法对字符串 \"TGATCA\" 和 \"CCCAGAA\" 进行可视化演示。", "style_instruction": "无特殊要求", "control_instruction": "每当有单元格被标记为已排序时，就暂停0.5秒；同时每次更新节点样式的时候，在节点上方显示“处理中...”的注释。"}, "gold_standard_output": {"algorithm_id": "edit_distance", "data_input": {"str1": "TGATCA", "str2": "CCCAGAA"}, "style_overrides": {}, "control_object": {"pauses": [{"condition": {"styleKey": "sorted"}, "duration": 500}], "annotations": [{"condition": {"op": "updateNodeStyle"}, "text": "处理中...", "position": "top"}]}}, "model_output": {"algorithm_id": "edit_distance", "data_input": {"str1": "TGATCA", "str2": "CCCAGAA"}, "style_overrides": {}, "control_object": {"pauses": [{"condition": {"styleKey": "sorted"}, "duration": 500}], "annotations": [{"condition": {"op": "updateNodeStyle"}, "text": "处理中...", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看快速排序的可视化演示，数据是 [64, 58, 11, 80, 63, 73, 19, 3, 7]。", "style_instruction": "让空闲节点（idle_node）的填充色变成黄绿色（#bdbf2a），描边用深紫色（#694195），边框宽度设为2像素；同时把默认的移动动画时长调成750毫秒。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [64, 58, 11, 80, 63, 73, 19, 3, 7], "style_overrides": {"elementStyles": {"idle_node": {"fill": "#bdbf2a", "stroke": "#694195", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [64, 58, 11, 80, 63, 73, 19, 3, 7], "style_overrides": {"elementStyles": {"idle_node": {"fill": "#bdbf2a", "stroke": "#694195", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看一次深度优先搜索(DFS)在一张四节点加权图上的可视化演示。图里有节点A、B、C、D，边的权重分别是A–B 12、A–C 16、A–D 13、B–C 15，以及C–D有两条边权重7和17，搜索从A节点开始。", "style_instruction": "让我看到节点移动时的动画每次都持续1秒钟。", "control_instruction": "每次节点切换（shifting）的时候停1.5秒；同时，每当一条边被标记为已遍历（traversed_edge），就在边的上方显示“下一步”的注释。"}, "gold_standard_output": {"algorithm_id": "dfs", "data_input": {"graph": {"C": [["D", 7], ["D", 17], ["B", 15], ["A", 16]], "D": [["C", 7], ["A", 13], ["C", 17]], "A": [["D", 13], ["B", 12], ["C", 16]], "B": [["A", 12], ["C", 15]]}, "start_node": "A"}, "style_overrides": {"animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"pauses": [{"condition": {"styleKey": "shifting"}, "duration": 1500}], "annotations": [{"condition": {"styleKey": "traversed_edge"}, "text": "下一步", "position": "top"}]}}, "model_output": {"algorithm_id": "dfs", "data_input": {"graph": {"A": [["B", 12], ["C", 16], ["D", 13]], "B": [["A", 12], ["C", 15]], "C": [["A", 16], ["B", 15], ["D", 7], ["D", 17]], "D": [["A", 13], ["C", 7], ["C", 17]]}, "start_node": "A"}, "style_overrides": {"animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"styleKey": "shifting"}, "duration": 1500}], "annotations": [{"condition": {"styleKey": "traversed_edge"}, "text": "下一步", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看用堆排序处理数据 [56, 38, 82, 45, 8, 92, 35, 32, 76] 的可视化效果。", "style_instruction": "无特殊要求", "control_instruction": "每次节点样式更新的时候，动画暂停1.5秒；每当元素发生位移时，在元素上方显示“交换”标注。"}, "gold_standard_output": {"algorithm_id": "heap_sort", "data_input": [56, 38, 82, 45, 8, 92, 35, 32, 76], "style_overrides": {}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1500}], "annotations": [{"condition": {"op": "shiftElements"}, "text": "交换", "position": "top"}]}}, "model_output": {"algorithm_id": "heap_sort", "data_input": [56, 38, 82, 45, 8, 92, 35, 32, 76], "style_overrides": {}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1500}], "annotations": [{"condition": {"op": "shiftElements"}, "text": "交换", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看 Dijkstra 算法在这个图上的可视化：图的邻接表是 A->C(8), A->D(5); B->C(2,18,13); C->A(8), C->B(2,18,13), C->D(7); D->A(5), D->C(7)，起点设为 A。", "style_instruction": "当元素处于 moving/shifting 状态时，用填充色 #cb9e84，描边颜色 #4ff74f，描边宽度 1.5；同时元素移动动画的默认时长设为 250 毫秒。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "dijkstra", "data_input": {"graph": {"C": [["A", 8], ["B", 2], ["B", 18], ["D", 7], ["B", 13]], "A": [["C", 8], ["D", 5]], "B": [["C", 2], ["C", 18], ["C", 13]], "D": [["A", 5], ["C", 7]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"shifting": {"fill": "#cb9e84", "stroke": "#4ff74f", "strokeWidth": 1.5}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {}}, "model_output": {"algorithm_id": "dijkstra", "data_input": {"graph": {"A": [["C", 8], ["D", 5]], "B": [["C", 2], ["C", 18], ["C", 13]], "C": [["A", 8], ["B", 2], ["B", 18], ["B", 13], ["D", 7]], "D": [["A", 5], ["C", 7]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"swapping": {"fill": "#cb9e84", "stroke": "#4ff74f", "strokeWidth": 1.5}, "shifting": {"fill": "#cb9e84", "stroke": "#4ff74f", "strokeWidth": 1.5}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {}}}
{"user_input": {"core_instruction": "请帮我用编辑距离算法可视化计算字符串 'GAGATT' 和 'ATATGCT' 之间的差异。", "style_instruction": "把最短路径上的边用嫩绿色（#9ee06a）高亮，并把线宽调粗到3。", "control_instruction": "每次节点样式更新时都暂停一秒；每当有元素移动，就在顶部冒出“找到了！”的注释。"}, "gold_standard_output": {"algorithm_id": "edit_distance", "data_input": {"str1": "GAGATT", "str2": "ATATGCT"}, "style_overrides": {"elementStyles": {"in_path_edge": {"color": "#9ee06a", "strokeWidth": 3}}}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1000}], "annotations": [{"condition": {"op": "moveElements"}, "text": "找到了!", "position": "top"}]}}, "model_output": {"algorithm_id": "edit_distance", "data_input": {"str1": "GAGATT", "str2": "ATATGCT"}, "style_overrides": {"elementStyles": {"in_path_edge": {"color": "#9ee06a", "strokeWidth": 3}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1000}], "annotations": [{"condition": {"op": "moveElements"}, "text": "找到了！", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看Bellman-Ford算法在下面这个有向带权图上的演示，从A节点开始。图的边是：A→B(14)，B→E(2)，C→B(5)，D→A(6)和D→A(9)，E→A(7)和E→A(14)，F→E(14)。", "style_instruction": "把所有普通边都用#d45010这种偏橘红的颜色，线条宽度设为1.5像素，元素默认移动动画时长调到250毫秒。", "control_instruction": "每次遍历到一条边的时候暂停0.5秒；每完成一次moveElements操作，就在画面顶部冒出“下一步”的标注。"}, "gold_standard_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"C": [["B", 5]], "D": [["A", 6], ["A", 9]], "F": [["E", 14]], "E": [["A", 7], ["A", 14]], "A": [["B", 14]], "B": [["E", 2]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"normal_edge": {"color": "#d45010", "strokeWidth": 1.5}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"pauses": [{"condition": {"styleKey": "traversed_edge"}, "duration": 500}], "annotations": [{"condition": {"op": "moveElements"}, "text": "下一步", "position": "top"}]}}, "model_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"A": [["B", 14]], "B": [["E", 2]], "C": [["B", 5]], "D": [["A", 6], ["A", 9]], "E": [["A", 7], ["A", 14]], "F": [["E", 14]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"normal_edge": {"color": "#d45010", "strokeWidth": 1.5}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"pauses": [{"condition": {"styleKey": "traversed_edge"}, "duration": 500}], "annotations": [{"condition": {"op": "moveElements"}, "text": "下一步", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想用Prim算法可视化一个带权无向图，从节点A出发构建最小生成树，图的边是：A–B(20)、A–C(16)、A–D(8)、B–C两条边(6和13)、C–E(5)、D–E(10)。", "style_instruction": "无特殊要求", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "prim", "data_input": {"graph": {"C": [["B", 13], ["A", 16], ["B", 6], ["E", 5]], "B": [["C", 13], ["A", 20], ["C", 6]], "E": [["D", 10], ["C", 5]], "D": [["E", 10], ["A", 8]], "A": [["B", 20], ["C", 16], ["D", 8]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {}}, "model_output": {"algorithm_id": "prim", "data_input": {"graph": {"A": [["B", 20], ["C", 16], ["D", 8]], "B": [["A", 20], ["C", 6], ["C", 13]], "C": [["A", 16], ["B", 6], ["B", 13], ["E", 5]], "D": [["A", 8], ["E", 10]], "E": [["C", 5], ["D", 10]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看快速排序的可视化，数据是 [30, 10, 81, 73, 69, 80, 61, 46, 87]。", "style_instruction": "将当前路径上的节点用深蓝色 (#2937f8) 填充，边框用亮青色 (#33dcd7)，线宽 1.5 像素；被访问过的节点填充棕灰色 (#61594c)，边框橙棕色 (#b26f1e)，线宽 1.5 像素。", "control_instruction": "每次发生元素交换（样式键为 swapping）时暂停 500 毫秒；每当样式更新时，在图形顶部显示“下一步”。"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [30, 10, 81, 73, 69, 80, 61, 46, 87], "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#2937f8", "stroke": "#33dcd7", "strokeWidth": 1.5}, "visited_node": {"fill": "#61594c", "stroke": "#b26f1e", "strokeWidth": 1.5}}}, "control_object": {"pauses": [{"condition": {"styleKey": "swapping"}, "duration": 500}], "annotations": [{"condition": {"op": "updateStyle"}, "text": "下一步", "position": "top"}]}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [30, 10, 81, 73, 69, 80, 61, 46, 87], "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#2937f8", "stroke": "#33dcd7", "strokeWidth": 1.5}, "visited_node": {"fill": "#61594c", "stroke": "#b26f1e", "strokeWidth": 1.5}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"styleKey": "swapping"}, "duration": 500}], "annotations": [{"condition": {"op": "updateStyle"}, "text": "下一步", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看最长公共子序列算法的可视化，输入字符串是“GCAGAA”和“GGGGGGG”。", "style_instruction": "把 pivot 元素的填充色改成 #33eb3e（清爽绿），描边用 #f75562（鲜艳粉红），描边宽度设为2.5px。", "control_instruction": "每次节点样式更新的时候，都停顿一下，大概1.5秒。"}, "gold_standard_output": {"algorithm_id": "lcs", "data_input": {"str1": "GCAGAA", "str2": "GGGGGGG"}, "style_overrides": {"elementStyles": {"pivot": {"fill": "#33eb3e", "stroke": "#f75562", "strokeWidth": 2.5}}}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1500}]}}, "model_output": {"algorithm_id": "lcs", "data_input": {"str1": "GCAGAA", "str2": "GGGGGGG"}, "style_overrides": {"elementStyles": {"pivot": {"fill": "#33eb3e", "stroke": "#f75562", "strokeWidth": 2.5}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1500}], "annotations": []}}}
{"user_input": {"core_instruction": "我想看一次快速排序的可视化，数据是 [12, 25, 24, 77, 35, 63, 68, 7, 3]。", "style_instruction": "把普通的边(normal_edge)用紫罗兰色 #c863f4 来画，线宽设为 2；把已经排好序的元素填成青柠绿 #b6b710，描边用薄荷绿 #58aaa4，描边宽度也设为 2。", "control_instruction": "每次样式更新(updateStyle)时暂停 0.5 秒；在元素移动(moveElements)的时候，在上方显示“处理中...”的注释。"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [12, 25, 24, 77, 35, 63, 68, 7, 3], "style_overrides": {"elementStyles": {"normal_edge": {"color": "#c863f4", "strokeWidth": 2}, "sorted": {"fill": "#b6b710", "stroke": "#58aaa4", "strokeWidth": 2}}}, "control_object": {"pauses": [{"condition": {"op": "updateStyle"}, "duration": 500}], "annotations": [{"condition": {"op": "moveElements"}, "text": "处理中...", "position": "top"}]}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [12, 25, 24, 77, 35, 63, 68, 7, 3], "style_overrides": {"elementStyles": {"normal_edge": {"color": "#c863f4", "strokeWidth": 2}, "sorted": {"fill": "#b6b710", "stroke": "#58aaa4", "strokeWidth": 2}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "updateStyle"}, "duration": 500}], "annotations": [{"condition": {"op": "moveElements"}, "text": "处理中...", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想用 Kruskal 算法来演示一个无向加权图的最小生成树，节点有 A、B、C、D、E，边的权重分别是 B–C:3、B–E:18、B–A:19、C–D:16、C–E:20、C–E:13、D–E:20。", "style_instruction": "把所有元素的默认移动动画时长都调成 1 秒", "control_instruction": "每次节点样式更新的时候，都暂停 1 秒钟"}, "gold_standard_output": {"algorithm_id": "kruskal", "data_input": {"graph": {"B": [["C", 3], ["E", 18], ["A", 19]], "C": [["B", 3], ["E", 20], ["D", 16], ["E", 13]], "E": [["B", 18], ["C", 20], ["D", 20], ["C", 13]], "D": [["C", 16], ["E", 20]], "A": [["B", 19]]}}, "style_overrides": {"animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1000}]}}, "model_output": {"algorithm_id": "kruskal", "data_input": {"graph": {"A": [["B", 19]], "B": [["C", 3], ["E", 18], ["A", 19]], "C": [["B", 3], ["D", 16], ["E", 20], ["E", 13]], "D": [["C", 16], ["E", 20]], "E": [["B", 18], ["C", 20], ["C", 13], ["D", 20]]}}, "style_overrides": {"animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1000}]}}}
{"user_input": {"core_instruction": "我要用选择排序来演示一下这组数据：[57, 42, 31, 84, 9, 70, 82]。", "style_instruction": "当某个元素正在被移动（shifting）时，给它涂上深紫色（#703b9e），用深绿（#0c622c）描边，粗细大概2.5px；而已经访问过的节点，用暗蓝紫（#4a5186）填充，配上亮紫描边（#8986fb），描边宽度3px。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "selection_sort", "data_input": [57, 42, 31, 84, 9, 70, 82], "style_overrides": {"elementStyles": {"shifting": {"fill": "#703b9e", "stroke": "#0c622c", "strokeWidth": 2.5}, "visited_node": {"fill": "#4a5186", "stroke": "#8986fb", "strokeWidth": 3}}}, "control_object": {}}, "model_output": {"algorithm_id": "selection_sort", "data_input": [57, 42, 31, 84, 9, 70, 82], "style_overrides": {"elementStyles": {"shifting": {"fill": "#703b9e", "stroke": "#0c622c", "strokeWidth": 2.5}, "visited_node": {"fill": "#4a5186", "stroke": "#8986fb", "strokeWidth": 3}}}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看一次快速排序的可视化，数据是 [11, 70, 58, 37, 65]。", "style_instruction": "把被访问过的节点（visited_node）填成深青绿色（#013b30），并用暖棕色（#b56422）给它们加上3px的粗边框。", "control_instruction": "每当发生交换（swapping）操作时，就暂停大约1.5秒。"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [11, 70, 58, 37, 65], "style_overrides": {"elementStyles": {"visited_node": {"fill": "#013b30", "stroke": "#b56422", "strokeWidth": 3}}}, "control_object": {"pauses": [{"condition": {"styleKey": "swapping"}, "duration": 1500}]}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [11, 70, 58, 37, 65], "style_overrides": {"elementStyles": {"visited_node": {"fill": "#013b30", "stroke": "#b56422", "strokeWidth": 3}}}, "control_object": {"pauses": [{"condition": {"styleKey": "swapping"}, "duration": 1500}]}}}
{"user_input": {"core_instruction": "我想做一次广度优先搜索，从起点节点 A 开始，图的邻接列表是 A 连到 B(17)、E(15)、C(18)，B 连接到 A(17)，D 连接到 E(8)、C(11)、C(14)，E 连接到 D(8)、A(15)、C(1)，C 连接到 D(11)、E(1)、A(18)、D(14)。", "style_instruction": "当触发 swapping 样式时，把元素填充成金黄色 (#d1ba56)，边框描边用亮青色 (#38feed)，线宽设为 2.5。", "control_instruction": "每当 shiftElements 操作发生，就暂停大概 500 毫秒。"}, "gold_standard_output": {"algorithm_id": "bfs", "data_input": {"graph": {"A": [["B", 17], ["E", 15], ["C", 18]], "B": [["A", 17]], "D": [["E", 8], ["C", 11], ["C", 14]], "E": [["D", 8], ["A", 15], ["C", 1]], "C": [["D", 11], ["E", 1], ["A", 18], ["D", 14]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"swapping": {"fill": "#d1ba56", "stroke": "#38feed", "strokeWidth": 2.5}}}, "control_object": {"pauses": [{"condition": {"op": "shiftElements"}, "duration": 500}]}}, "model_output": {"algorithm_id": "bfs", "data_input": {"graph": {"A": [["B", 17], ["E", 15], ["C", 18]], "B": [["A", 17]], "D": [["E", 8], ["C", 11], ["C", 14]], "E": [["D", 8], ["A", 15], ["C", 1]], "C": [["D", 11], ["E", 1], ["A", 18], ["D", 14]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"swapping": {"fill": "#d1ba56", "stroke": "#38feed", "strokeWidth": 2.5}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "shiftElements"}, "duration": 500}], "annotations": []}}}
{"user_input": {"core_instruction": "我想看一下拓扑排序的可视化，数据是 [2, 70, 79, 95, 3]。", "style_instruction": "无特殊要求", "control_instruction": "每次节点样式更新的时候都暂停一下，大概1秒左右。"}, "gold_standard_output": {"algorithm_id": "topological_sort", "data_input": [2, 70, 79, 95, 3], "style_overrides": {}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1000}]}}, "model_output": {"algorithm_id": "topological_sort", "data_input": [2, 70, 79, 95, 3], "style_overrides": {}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1000}], "annotations": []}}}
{"user_input": {"core_instruction": "我想看一下快速排序的可视化，处理的数据是 [14, 96, 10, 97, 87, 11, 41, 24]。", "style_instruction": "把正在移动（shifting）的元素填充为紫色 (#ab71e6)、描边用金色 (#ecbd71)，线宽 3px；把当前激活的子数组（sub_array_active）填成棕橙色 (#bf7310)、描边深棕 (#6d513a)，线宽也是 3px；默认元素移动动画的时长设为 0.75 秒。", "control_instruction": "每次 updateNodeStyle 操作时暂停 0.5 秒，并且在 normal_edge 的连线上方标注“交换”。"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [14, 96, 10, 97, 87, 11, 41, 24], "style_overrides": {"elementStyles": {"shifting": {"fill": "#ab71e6", "stroke": "#ecbd71", "strokeWidth": 3}, "sub_array_active": {"fill": "#bf7310", "stroke": "#6d513a", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 500}], "annotations": [{"condition": {"styleKey": "normal_edge"}, "text": "交换", "position": "top"}]}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [14, 96, 10, 97, 87, 11, 41, 24], "style_overrides": {"elementStyles": {"shifting": {"fill": "#ab71e6", "stroke": "#ecbd71", "strokeWidth": 3}, "sub_array_active": {"fill": "#bf7310", "stroke": "#6d513a", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 500}], "annotations": [{"condition": {"styleKey": "normal_edge"}, "text": "交换", "position": "top"}]}}}
{"user_input": {"core_instruction": "请对这个图执行广度优先搜索（BFS），从起点A开始遍历；图的邻接关系列表是：A连接C(14)和B(5)，B连接A(5)和C(2)，C连接D(16)、E(16)、A(14)、D(8)、D(16)和B(2)，D连接C(16)、C(8)和C(16)，E连接C(16)。", "style_instruction": "把所有普通边（normal_edge）的颜色换成粉紫色（#fb6ee5），线宽设为2。", "control_instruction": "每次触发节点样式更新（updateNodeStyle）的时候，停顿大约1秒钟（1000毫秒）。"}, "gold_standard_output": {"algorithm_id": "bfs", "data_input": {"graph": {"D": [["C", 16], ["C", 8], ["C", 16]], "C": [["D", 16], ["E", 16], ["A", 14], ["D", 8], ["D", 16], ["B", 2]], "E": [["C", 16]], "A": [["C", 14], ["B", 5]], "B": [["A", 5], ["C", 2]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"normal_edge": {"color": "#fb6ee5", "strokeWidth": 2}}}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1000}]}}, "model_output": {"algorithm_id": "bfs", "data_input": {"graph": {"A": [["C", 14], ["B", 5]], "B": [["A", 5], ["C", 2]], "C": [["D", 16], ["E", 16], ["A", 14], ["D", 8], ["D", 16], ["B", 2]], "D": [["C", 16], ["C", 8], ["C", 16]], "E": [["C", 16]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"normal_edge": {"color": "#fb6ee5", "strokeWidth": 2}}}, "control_object": {"pauses": [{"condition": {"op": "updateNodeStyle"}, "duration": 1000}]}}}
{"user_input": {"core_instruction": "麻烦帮我用 LCS（最长公共子序列）算法对字符串 'CTTTG' 和 'GCTGCC' 做可视化演示。", "style_instruction": "当子数组激活时，用绿色（#8ea650）填充，粉色（#ee77bd）描边，描边宽度设为2；所有元素移动的动画时长统一为250毫秒。", "control_instruction": "每次发生样式更新时，都在动画顶部出现一个注释“下一步”。"}, "gold_standard_output": {"algorithm_id": "lcs", "data_input": {"str1": "CTTTG", "str2": "GCTGCC"}, "style_overrides": {"elementStyles": {"sub_array_active": {"fill": "#8ea650", "stroke": "#ee77bd", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"annotations": [{"condition": {"op": "updateStyle"}, "text": "下一步", "position": "top"}]}}, "model_output": {"algorithm_id": "lcs", "data_input": {"str1": "CTTTG", "str2": "GCTGCC"}, "style_overrides": {"elementStyles": {"sub_array_active": {"fill": "#8ea650", "stroke": "#ee77bd", "strokeWidth": 2}}, "animationStyles": {"default_move": {"type": "ease-in-out", "duration": 250}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [], "annotations": [{"condition": {"op": "updateStyle"}, "text": "下一步", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看一下对节点集合 [36, 97, 63, 55, 33, 50, 57, 68, 45, 84] 的拓扑排序可视化。", "style_instruction": "把“swapping”状态下的节点填充色改成 #b8b879，边框用 #f623c7，宽度 1.5；空闲节点（idle_node）用 #52e81f 填充，边框 #0defc8，宽度 2；所有元素移动动画统一设为 1 秒。", "control_instruction": "当节点被标记为 in_path_node 时，每次暂停 1 秒。"}, "gold_standard_output": {"algorithm_id": "topological_sort", "data_input": [36, 97, 63, 55, 33, 50, 57, 68, 45, 84], "style_overrides": {"elementStyles": {"swapping": {"fill": "#b8b879", "stroke": "#f623c7", "strokeWidth": 1.5}, "idle_node": {"fill": "#52e81f", "stroke": "#0defc8", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"pauses": [{"condition": {"styleKey": "in_path_node"}, "duration": 1000}]}}, "model_output": {"algorithm_id": "topological_sort", "data_input": {"graph": {"36": [], "97": [], "63": [], "55": [], "33": [], "50": [], "57": [], "68": [], "45": [], "84": []}}, "style_overrides": {"elementStyles": {"swapping": {"fill": "#b8b879", "stroke": "#f623c7", "strokeWidth": 1.5}, "idle_node": {"fill": "#52e81f", "stroke": "#0defc8", "strokeWidth": 2}}, "variableStyles": {}, "tempStyles": {}, "commentStyles": {}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"pauses": [{"condition": {"styleKey": "in_path_node"}, "duration": 1000}]}}}
{"user_input": {"core_instruction": "我想看一下拓扑排序的可视化演示，数据是 [42, 25, 63, 91, 37, 99, 64, 52]。", "style_instruction": "在比较元素的时候，把它们填充成深紫红色（#6d3753），用亮粉色（#f92ed2）描边，描边宽度设为2.5。", "control_instruction": "每次更新样式时暂停0.5秒；当某个节点被标记为 visited_node 时，就在节点上方冒出“找到了!”的注释。"}, "gold_standard_output": {"algorithm_id": "topological_sort", "data_input": [42, 25, 63, 91, 37, 99, 64, 52], "style_overrides": {"elementStyles": {"compare": {"fill": "#6d3753", "stroke": "#f92ed2", "strokeWidth": 2.5}}}, "control_object": {"pauses": [{"condition": {"op": "updateStyle"}, "duration": 500}], "annotations": [{"condition": {"styleKey": "visited_node"}, "text": "找到了!", "position": "top"}]}}, "model_output": {"algorithm_id": "topological_sort", "data_input": [42, 25, 63, 91, 37, 99, 64, 52], "style_overrides": {"elementStyles": {"compare": {"fill": "#6d3753", "stroke": "#f92ed2", "strokeWidth": 2.5}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "updateStyle"}, "duration": 500}], "annotations": [{"condition": {"styleKey": "visited_node"}, "text": "找到了!", "position": "top"}]}}}
{"user_input": {"core_instruction": "请用 Prim 算法从节点 A 开始在以下带权图上构建最小生成树，图的边包括：F-C 权重14，F-D 权重11 和 权重3，C-E 权重10，D-E 权重17，D-A 权重13 和 权重6，A-B 权重7。", "style_instruction": "想让加入最小生成树的节点用深棕色填充(#5b300f)，描边深蓝色(#2c3176)，宽度2；已经确定的边（sorted）用浅绿色填充(#bde196)，描边绿色(#4bb505)，宽度2；移动动画的默认持续时间设为250毫秒。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "prim", "data_input": {"graph": {"F": [["C", 14], ["D", 11], ["D", 3]], "C": [["F", 14], ["E", 10]], "D": [["F", 11], ["E", 17], ["A", 13], ["A", 6], ["F", 3]], "A": [["B", 7], ["D", 13], ["D", 6]], "B": [["A", 7]], "E": [["D", 17], ["C", 10]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#5b300f", "stroke": "#2c3176", "strokeWidth": 2}, "sorted": {"fill": "#bde196", "stroke": "#4bb505", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {}}, "model_output": {"algorithm_id": "prim", "data_input": {"graph": {"F": [["C", 14], ["D", 11], ["D", 3]], "C": [["F", 14], ["E", 10]], "E": [["C", 10], ["D", 17]], "D": [["F", 11], ["F", 3], ["E", 17], ["A", 13], ["A", 6]], "A": [["D", 13], ["D", 6], ["B", 7]], "B": [["A", 7]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"visited_node": {"fill": "#5b300f", "stroke": "#2c3176", "strokeWidth": 2}, "sorted": {"fill": "#bde196", "stroke": "#4bb505", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看一下快速排序的可视化，数据是 [76, 22, 84, 75, 31, 40, 70]。", "style_instruction": "当元素处于交换（swapping）状态时，让它们填充成深蓝色（#2634fc），用亮绿色（#aad328）描边，描边宽度大约1.5。", "control_instruction": "每次遇到闲置节点（idle_node）的时候，都暂停大概1.5秒。"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [76, 22, 84, 75, 31, 40, 70], "style_overrides": {"elementStyles": {"swapping": {"fill": "#2634fc", "stroke": "#aad328", "strokeWidth": 1.5}}}, "control_object": {"pauses": [{"condition": {"styleKey": "idle_node"}, "duration": 1500}]}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [76, 22, 84, 75, 31, 40, 70], "style_overrides": {"elementStyles": {"swapping": {"fill": "#2634fc", "stroke": "#aad328", "strokeWidth": 1.5}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"styleKey": "idle_node"}, "duration": 1500}], "annotations": []}}}
{"user_input": {"core_instruction": "让我用深度优先搜索遍历这个带权图，起始节点是A。图中A到D有三条边，权重分别是4、6、14；D和C之间有两条边，权重是9和7；C和B之间有一条边，权重2。", "style_instruction": "当节点被比较时，用淡橙色 (#ffb061) 填充，浅湖蓝 (#7fc5d9) 描边，线宽2px；当子路径或活跃状态时，用灰紫色 (#9497b2) 填充，深色 (#181422) 描边，线宽2px。", "control_instruction": "每次触发元素移动（shiftElements）操作时，都暂停大约0.5秒。"}, "gold_standard_output": {"algorithm_id": "dfs", "data_input": {"graph": {"B": [["C", 2]], "C": [["B", 2], ["D", 9], ["D", 7]], "D": [["A", 4], ["A", 6], ["A", 14], ["C", 9], ["C", 7]], "A": [["D", 4], ["D", 6], ["D", 14]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"compare": {"fill": "#ffb061", "stroke": "#7fc5d9", "strokeWidth": 2}, "sub_array_active": {"fill": "#9497b2", "stroke": "#181422", "strokeWidth": 2}}}, "control_object": {"pauses": [{"condition": {"op": "shiftElements"}, "duration": 500}]}}, "model_output": {"algorithm_id": "dfs", "data_input": {"graph": {"A": [["D", 4], ["D", 6], ["D", 14]], "D": [["A", 4], ["A", 6], ["A", 14], ["C", 9], ["C", 7]], "C": [["D", 9], ["D", 7], ["B", 2]], "B": [["C", 2]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"compare": {"fill": "#ffb061", "stroke": "#7fc5d9", "strokeWidth": 2}, "sub_array_active": {"fill": "#9497b2", "stroke": "#181422", "strokeWidth": 2}}}, "control_object": {"pauses": [{"condition": {"op": "shiftElements"}, "duration": 500}]}}}
{"user_input": {"core_instruction": "给我做一个选择排序的可视化，数据是 [50, 46, 66, 78, 37, 76, 18, 67]。", "style_instruction": "把遍历路径的连线(in_path_edge)染成深紫色 #3607ae，线宽设置为 2.5px；同时将所有元素移动的动画默认时长调成 1 秒。", "control_instruction": "每当有元素移动(moveElements)时暂停 0.5 秒；每次发生元素移位(shiftElements)操作，就在顶部弹出“处理中...”的注释。"}, "gold_standard_output": {"algorithm_id": "selection_sort", "data_input": [50, 46, 66, 78, 37, 76, 18, 67], "style_overrides": {"elementStyles": {"in_path_edge": {"color": "#3607ae", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 500}], "annotations": [{"condition": {"op": "shiftElements"}, "text": "处理中...", "position": "top"}]}}, "model_output": {"algorithm_id": "selection_sort", "data_input": [50, 46, 66, 78, 37, 76, 18, 67], "style_overrides": {"elementStyles": {"in_path_edge": {"color": "#3607ae", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"type": "ease-in-out", "duration": 1000}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "moveElements"}, "duration": 500}], "annotations": [{"condition": {"op": "shiftElements"}, "text": "处理中...", "position": "top"}]}}}
{"user_input": {"core_instruction": "请用 Kruskal 算法在这个无向图上生成最小生成树，节点有 A、B、C、D、E，边和权重分别是：C–A 2、C–A 7、C–D 4、C–E 18、D–E 7、D–E 5、D–E 9、D–B 7。", "style_instruction": "把选入最小生成树的节点(in_path_node)填成#c8cd67，描边#21bf23、宽度3px；普通边(normal_edge)用#e03f30，线宽1.5px；移动动画默认持续250ms。", "control_instruction": "每当触发 swapping 样式时就暂停大概1秒钟。"}, "gold_standard_output": {"algorithm_id": "kruskal", "data_input": {"graph": {"C": [["A", 2], ["A", 7], ["D", 4], ["E", 18]], "A": [["C", 2], ["C", 7]], "E": [["D", 7], ["D", 5], ["C", 18], ["D", 9]], "D": [["E", 7], ["E", 5], ["B", 7], ["C", 4], ["E", 9]], "B": [["D", 7]]}}, "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#c8cd67", "stroke": "#21bf23", "strokeWidth": 3}, "normal_edge": {"color": "#e03f30", "strokeWidth": 1.5}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"pauses": [{"condition": {"styleKey": "swapping"}, "duration": 1000}]}}, "model_output": {"algorithm_id": "kruskal", "data_input": {"graph": {"A": [["C", 2], ["C", 7]], "B": [["D", 7]], "C": [["A", 2], ["A", 7], ["D", 4], ["E", 18]], "D": [["C", 4], ["E", 7], ["E", 5], ["E", 9], ["B", 7]], "E": [["C", 18], ["D", 7], ["D", 5], ["D", 9]]}}, "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#c8cd67", "stroke": "#21bf23", "strokeWidth": 3}, "normal_edge": {"color": "#e03f30", "strokeWidth": 1.5}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"styleKey": "swapping"}, "duration": 1000}], "annotations": []}}}
{"user_input": {"core_instruction": "我想看一段快速排序的可视化动画，数据是 [45, 83, 54, 58, 99]。", "style_instruction": "把元素移动的动画放慢一些，每次移动的过渡大概持续0.75秒。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [45, 83, 54, 58, 99], "style_overrides": {"animationStyles": {"default_move": {"duration": 750}}}, "control_object": {}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [45, 83, 54, 58, 99], "style_overrides": {"animationStyles": {"default_move": {"duration": 750}}}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看一下快速排序的可视化，数据是 [6, 21, 92, 27, 93, 64, 94, 51, 82]。", "style_instruction": "把正在划分路径上的节点（in_path_node）填充成金铜色 #dcad4c，边框用棕褐色 #c3825e，边框宽度设为3；同时让默认的移动动画更流畅一点，每次移动持续250毫秒。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [6, 21, 92, 27, 93, 64, 94, 51, 82], "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#dcad4c", "stroke": "#c3825e", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [6, 21, 92, 27, 93, 64, 94, 51, 82], "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#dcad4c", "stroke": "#c3825e", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {}}}
{"user_input": {"core_instruction": "请用选择排序对数组 [63, 57, 55, 41, 6, 29] 进行可视化展示。", "style_instruction": "我想让被移动的元素（shifting）的填充色变成 #5299f2，边框颜色是 #e8ebed，边框宽度 2，然后所有元素的移动动画时长统一设为 750 毫秒。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "selection_sort", "data_input": [63, 57, 55, 41, 6, 29], "style_overrides": {"elementStyles": {"shifting": {"fill": "#5299f2", "stroke": "#e8ebed", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {}}, "model_output": {"algorithm_id": "selection_sort", "data_input": [63, 57, 55, 41, 6, 29], "style_overrides": {"elementStyles": {"shifting": {"fill": "#5299f2", "stroke": "#e8ebed", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看一下插入排序的可视化演示，数据是 [5, 22, 75, 17, 99, 83, 39, 64, 27]，展示每次将元素插入已排序部分的全过程。", "style_instruction": "比较时把元素填充成紫色(#6417b2)，用亮绿色(#0fcc45)1.5px边框标出；已访问或已插入的节点用粉红色(#f35972)填充，搭配古铜色(#d9a166)2px边框；所有元素移动动画统一设为250毫秒。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "insertion_sort", "data_input": [5, 22, 75, 17, 99, 83, 39, 64, 27], "style_overrides": {"elementStyles": {"compare": {"fill": "#6417b2", "stroke": "#0fcc45", "strokeWidth": 1.5}, "visited_node": {"fill": "#f35972", "stroke": "#d9a166", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {}}, "model_output": {"algorithm_id": "insertion_sort", "data_input": [5, 22, 75, 17, 99, 83, 39, 64, 27], "style_overrides": {"elementStyles": {"compare": {"fill": "#6417b2", "stroke": "#0fcc45", "strokeWidth": 1.5}, "visited_node": {"fill": "#f35972", "stroke": "#d9a166", "strokeWidth": 2}, "sorted": {"fill": "#f35972", "stroke": "#d9a166", "strokeWidth": 2}}, "animationStyles": {"default_move": {"type": "ease-in-out", "duration": 250}}}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看快速排序的可视化演示，数据就是 [24, 19, 22, 30, 39, 28]。", "style_instruction": "在交换的过程中，希望交换的元素呈现淡绿色填充（#6ae4b7），同时带上2px的洋红色描边（#fc7be8）。", "control_instruction": "每次元素移动时都暂停大约1秒钟；当某个子数组被激活时，在画面顶部显示“处理中...”的注释。"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [24, 19, 22, 30, 39, 28], "style_overrides": {"elementStyles": {"swapping": {"fill": "#6ae4b7", "stroke": "#fc7be8", "strokeWidth": 2}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "sub_array_active"}, "text": "处理中...", "position": "top"}]}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [24, 19, 22, 30, 39, 28], "style_overrides": {"elementStyles": {"swapping": {"fill": "#6ae4b7", "stroke": "#fc7be8", "strokeWidth": 2}}}, "control_object": {"pauses": [{"condition": {"op": "moveElements"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "sub_array_active"}, "text": "处理中...", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看一段从节点A出发的广度优先搜索动画，这个图包含节点A、B、C、D、E、F，边和权重如下：F—A(14)、F—E(4)、A—E(1)、A—D(2和8)、E—C(7和6)、C—B(14)。", "style_instruction": "无特殊要求", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "bfs", "data_input": {"graph": {"F": [["A", 14], ["E", 4]], "A": [["F", 14], ["E", 1], ["D", 2], ["D", 8]], "E": [["C", 7], ["A", 1], ["F", 4], ["C", 6]], "C": [["E", 7], ["B", 14], ["E", 6]], "D": [["A", 2], ["A", 8]], "B": [["C", 14]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {}}, "model_output": {"algorithm_id": "bfs", "data_input": {"graph": {"A": [["F", 14], ["E", 1], ["D", 2], ["D", 8]], "B": [["C", 14]], "C": [["E", 7], ["E", 6], ["B", 14]], "D": [["A", 2], ["A", 8]], "E": [["F", 4], ["A", 1], ["C", 7], ["C", 6]], "F": [["A", 14], ["E", 4]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看一段插入排序的可视化，数据就是 [24, 81, 5, 44, 26, 70, 42]。", "style_instruction": "把所有空闲的节点涂成柔和的钢蓝色（#a4b6c1），边框画成深莓色（#391a27），线宽搞到2.5px；元素移动时的动画时长统一设为750毫秒。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "insertion_sort", "data_input": [24, 81, 5, 44, 26, 70, 42], "style_overrides": {"elementStyles": {"idle_node": {"fill": "#a4b6c1", "stroke": "#391a27", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {}}, "model_output": {"algorithm_id": "insertion_sort", "data_input": [24, 81, 5, 44, 26, 70, 42], "style_overrides": {"elementStyles": {"idle_node": {"fill": "#a4b6c1", "stroke": "#391a27", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {}}}
{"user_input": {"core_instruction": "请用广度优先搜索（BFS）来遍历这张有权重的图，从节点A开始。图的邻接表是：A连D(19)和B(3)；B连A(3)、E(17)、F(12)、C(19)；C连F(15)和B(19)；D连A(19)、E(16)和E(17)；E连D(16)、B(17)和D(17)；F连C(15)和B(12)。", "style_instruction": "当活跃子队列的节点高亮时，用深蓝色(#1945de)填充，亮黄色(#dff117)描边，线宽2.5；如果触发“交换”操作，则用粉紫色(#da64da)填充，棕色(#b45c4a)描边，线宽3。", "control_instruction": "每次有样式更新（updateStyle）的时候，都暂停大约1.5秒。"}, "gold_standard_output": {"algorithm_id": "bfs", "data_input": {"graph": {"D": [["A", 19], ["E", 16], ["E", 17]], "A": [["D", 19], ["B", 3]], "E": [["D", 16], ["B", 17], ["D", 17]], "F": [["C", 15], ["B", 12]], "C": [["F", 15], ["B", 19]], "B": [["A", 3], ["E", 17], ["F", 12], ["C", 19]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"sub_array_active": {"fill": "#1945de", "stroke": "#dff117", "strokeWidth": 2.5}, "swapping": {"fill": "#da64da", "stroke": "#b45c4a", "strokeWidth": 3}}}, "control_object": {"pauses": [{"condition": {"op": "updateStyle"}, "duration": 1500}]}}, "model_output": {"algorithm_id": "bfs", "data_input": {"graph": {"A": [["D", 19], ["B", 3]], "B": [["A", 3], ["E", 17], ["F", 12], ["C", 19]], "C": [["F", 15], ["B", 19]], "D": [["A", 19], ["E", 16], ["E", 17]], "E": [["D", 16], ["B", 17], ["D", 17]], "F": [["C", 15], ["B", 12]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"sub_array_active": {"fill": "#1945de", "stroke": "#dff117", "strokeWidth": 2.5}, "swapping": {"fill": "#da64da", "stroke": "#b45c4a", "strokeWidth": 3}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "updateStyle"}, "duration": 1500}], "annotations": []}}}
{"user_input": {"core_instruction": "请用广度优先搜索遍历以下加权图，从节点 A 开始。图的邻接列表是：C 连接 D(4)、A(14)、A(13)；D 连接 C(4)、A(18)、B(5)、A(14)；B 连接 A(18)、D(5)；A 连接 B(18)、D(18)、C(14)、D(14)、C(13)。", "style_instruction": "把默认的移动动画时长设置成750毫秒。", "control_instruction": "每次队列元素移动（shiftElements）的时候都暂停1.5秒；并且每次更新节点样式时，在节点上方显示“下一步”标注。"}, "gold_standard_output": {"algorithm_id": "bfs", "data_input": {"graph": {"C": [["D", 4], ["A", 14], ["A", 13]], "D": [["C", 4], ["A", 18], ["B", 5], ["A", 14]], "B": [["A", 18], ["D", 5]], "A": [["B", 18], ["D", 18], ["C", 14], ["D", 14], ["C", 13]]}, "start_node": "A"}, "style_overrides": {"animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"op": "shiftElements"}, "duration": 1500}], "annotations": [{"condition": {"op": "updateNodeStyle"}, "text": "下一步", "position": "top"}]}}, "model_output": {"algorithm_id": "bfs", "data_input": {"graph": {"C": [["D", 4], ["A", 14], ["A", 13]], "D": [["C", 4], ["A", 18], ["B", 5], ["A", 14]], "B": [["A", 18], ["D", 5]], "A": [["B", 18], ["D", 18], ["C", 14], ["D", 14], ["C", 13]]}, "start_node": "A"}, "style_overrides": {"animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "shiftElements"}, "duration": 1500}], "annotations": [{"condition": {"op": "updateNodeStyle"}, "text": "下一步", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想要一个从节点 A 开始的深度优先搜索可视化，图的结构是：A 和 B 之间有两条边，权重分别是 13 和 14；B 和 C 之间两条边，权重分别是 14 和 18；B 到 E 有一条 17 的边；C 到 D 有一条 3 的边；D 到 E 有一条 19 的边。", "style_instruction": "无特殊要求", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "dfs", "data_input": {"graph": {"C": [["D", 3], ["B", 14], ["B", 18]], "D": [["C", 3], ["E", 19]], "A": [["B", 13], ["B", 14]], "B": [["A", 13], ["C", 14], ["A", 14], ["E", 17], ["C", 18]], "E": [["B", 17], ["D", 19]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {}}, "model_output": {"algorithm_id": "dfs", "data_input": {"graph": {"A": [["B", 13], ["B", 14]], "B": [["A", 13], ["A", 14], ["C", 14], ["C", 18], ["E", 17]], "C": [["B", 14], ["B", 18], ["D", 3]], "D": [["C", 3], ["E", 19]], "E": [["B", 17], ["D", 19]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看一下LCS（最长公共子序列）算法在字符串 \"GGTTATG\" 和 \"AAACTTTG\" 上的可视化过程。", "style_instruction": "当进行字符比较的时候，让对应的元素填充成粉紫色（#f857b5），边框用亮绿色（#98d046）并且线宽2.5；普通的连线也用深绿色（#1e651a）、宽度2.5。另外，所有元素移动的动画统一设为750毫秒。", "control_instruction": "每次触发元素平移（shiftElements）的时候都暂停1秒；并且当一个节点被标记为 visited_node 时，就在节点上方显示“找到了!”的注释。"}, "gold_standard_output": {"algorithm_id": "lcs", "data_input": {"str1": "GGTTATG", "str2": "AAACTTTG"}, "style_overrides": {"elementStyles": {"compare": {"fill": "#f857b5", "stroke": "#98d046", "strokeWidth": 2.5}, "normal_edge": {"color": "#1e651a", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"op": "shiftElements"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "visited_node"}, "text": "找到了!", "position": "top"}]}}, "model_output": {"algorithm_id": "lcs", "data_input": {"str1": "GGTTATG", "str2": "AAACTTTG"}, "style_overrides": {"elementStyles": {"compare": {"fill": "#f857b5", "stroke": "#98d046", "strokeWidth": 2.5}, "normal_edge": {"color": "#1e651a", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"type": "ease-in-out", "duration": 750}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "shiftElements"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "visited_node"}, "text": "找到了!", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看 Kruskal 最小生成树的可视化，给定一张有 A、B、C、D、E 五个顶点的图，边和权重分别是：D-C 为 6，D-B 为 11，C-E 有三条权重 5、12、15，E-B 为 17，A-B 为 9。", "style_instruction": "无特殊要求", "control_instruction": "当动画中出现 styleKey 为 shifting 的阶段时，就在上方显示“交换”这个注释。"}, "gold_standard_output": {"algorithm_id": "kruskal", "data_input": {"graph": {"D": [["C", 6], ["B", 11]], "C": [["D", 6], ["E", 5], ["E", 12], ["E", 15]], "E": [["C", 5], ["C", 12], ["C", 15], ["B", 17]], "B": [["D", 11], ["A", 9], ["E", 17]], "A": [["B", 9]]}}, "style_overrides": {}, "control_object": {"annotations": [{"condition": {"styleKey": "shifting"}, "text": "交换", "position": "top"}]}}, "model_output": {"algorithm_id": "kruskal", "data_input": {"graph": {"A": [["B", 9]], "B": [["D", 11], ["E", 17], ["A", 9]], "C": [["D", 6], ["E", 5], ["E", 12], ["E", 15]], "D": [["C", 6], ["B", 11]], "E": [["C", 5], ["C", 12], ["C", 15], ["B", 17]]}}, "style_overrides": {}, "control_object": {"annotations": [{"condition": {"styleKey": "shifting"}, "text": "交换", "position": "top"}]}}}
{"user_input": {"core_instruction": "请用选择排序处理数组 [91, 56, 37, 10, 18]。", "style_instruction": "无特殊要求", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "selection_sort", "data_input": [91, 56, 37, 10, 18], "style_overrides": {}, "control_object": {}}, "model_output": {"algorithm_id": "selection_sort", "data_input": [91, 56, 37, 10, 18], "style_overrides": {}, "control_object": {}}}
{"user_input": {"core_instruction": "请用Prim算法在下图上构建最小生成树：节点A连D权重4、B权重11、C权重13；D再连C权重6；C连B有两条边，权重12和17；从节点A开始。", "style_instruction": "把处于shifting状态的节点或边涂成暖黄色（#cb9e10），边框用淡金色（#efd65b），线宽2.5；所有移动动画的默认时长设为750毫秒。", "control_instruction": "每当有元素被标记为“sorted”时，就暂停1.5秒再继续。"}, "gold_standard_output": {"algorithm_id": "prim", "data_input": {"graph": {"A": [["D", 4], ["B", 11], ["C", 13]], "D": [["A", 4], ["C", 6]], "C": [["B", 12], ["B", 17], ["D", 6], ["A", 13]], "B": [["C", 12], ["C", 17], ["A", 11]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"shifting": {"fill": "#cb9e10", "stroke": "#efd65b", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"styleKey": "sorted"}, "duration": 1500}]}}, "model_output": {"algorithm_id": "prim", "data_input": {"graph": {"A": [["D", 4], ["B", 11], ["C", 13]], "D": [["A", 4], ["C", 6]], "C": [["A", 13], ["D", 6], ["B", 12], ["B", 17]], "B": [["A", 11], ["C", 12], ["C", 17]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"shifting": {"fill": "#cb9e10", "stroke": "#efd65b", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"styleKey": "sorted"}, "duration": 1500}]}}}
{"user_input": {"core_instruction": "我想看一下Bellman-Ford算法在这个带权有向图上的最短路径演示，从A节点开始。图的边分别是：C→D（7）、C→B（19）、C→E（13）、A→B（16）、D→A（20）、E→A（18）、B→A（12）。", "style_instruction": "无特殊要求", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"C": [["D", 7], ["B", 19], ["E", 13]], "A": [["B", 16]], "D": [["A", 20]], "E": [["A", 18]], "B": [["A", 12]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {}}, "model_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"C": [["D", 7], ["B", 19], ["E", 13]], "A": [["B", 16]], "D": [["A", 20]], "E": [["A", 18]], "B": [["A", 12]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {}}}
{"user_input": {"core_instruction": "我想在一个有向加权图上从节点 A 出发，用 Bellman-Ford 算法求单源最短路径。图的边包括：D->E(17)、D->B(17)、C->B(18)、C->E(16)、C->E(10)、A->E(9)、E->A(3)。", "style_instruction": "让普通边都显示为深紫色 (#4f0850)，线条宽度设为 1.5 像素。", "control_instruction": "无特殊要求"}, "gold_standard_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"D": [["E", 17], ["B", 17]], "C": [["B", 18], ["E", 16], ["E", 10]], "A": [["E", 9]], "E": [["A", 3]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"normal_edge": {"color": "#4f0850", "strokeWidth": 1.5}}}, "control_object": {}}, "model_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"D": [["E", 17], ["B", 17]], "C": [["B", 18], ["E", 16], ["E", 10]], "A": [["E", 9]], "E": [["A", 3]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"normal_edge": {"color": "#4f0850", "strokeWidth": 1.5}}}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看一段拓扑排序的可视化，数据是 [31, 73, 5, 69, 66, 94, 20, 19, 51, 3]。", "style_instruction": "把所有 in_path_edge（被选入路径的边）用清新的浅蓝色（#8de3ff）标记，线宽设为 2px，让它们在动画里更突出。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "topological_sort", "data_input": [31, 73, 5, 69, 66, 94, 20, 19, 51, 3], "style_overrides": {"elementStyles": {"in_path_edge": {"color": "#8de3ff", "strokeWidth": 2}}}, "control_object": {}}, "model_output": {"algorithm_id": "topological_sort", "data_input": [31, 73, 5, 69, 66, 94, 20, 19, 51, 3], "style_overrides": {"elementStyles": {"in_path_edge": {"color": "#8de3ff", "strokeWidth": 2}}}, "control_object": {}}}
{"user_input": {"core_instruction": "我想用堆排序演示一下数组 [23, 30, 58, 70, 93, 49, 28, 48, 44, 2] 的全过程。", "style_instruction": "把正在比较的节点填充成深蓝色 (#1635c5)，边框用紫灰色 (#706492)，宽度 3；把当前活跃的子数组元素填充成深灰色 (#4e4b64)，边框用亮紫色 (#b141d0)，宽度 1.5。动画中所有默认移动的时长都设为 250 毫秒。", "control_instruction": "每当有样式更新（updateStyle）时，暂停 1 秒钟。"}, "gold_standard_output": {"algorithm_id": "heap_sort", "data_input": [23, 30, 58, 70, 93, 49, 28, 48, 44, 2], "style_overrides": {"elementStyles": {"compare": {"fill": "#1635c5", "stroke": "#706492", "strokeWidth": 3}, "sub_array_active": {"fill": "#4e4b64", "stroke": "#b141d0", "strokeWidth": 1.5}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"pauses": [{"condition": {"op": "updateStyle"}, "duration": 1000}]}}, "model_output": {"algorithm_id": "heap_sort", "data_input": [23, 30, 58, 70, 93, 49, 28, 48, 44, 2], "style_overrides": {"elementStyles": {"compare": {"fill": "#1635c5", "stroke": "#706492", "strokeWidth": 3}, "sub_array_active": {"fill": "#4e4b64", "stroke": "#b141d0", "strokeWidth": 1.5}}, "animationStyles": {"default_move": {"duration": 250}}}, "control_object": {"pauses": [{"condition": {"op": "updateStyle"}, "duration": 1000}]}}}
{"user_input": {"core_instruction": "我想看一次广度优先搜索的可视化，数据是一个加权图，从节点A开始：A–C(7)、A–B(4)、A–E(15)；B–E(18)、B–A(4)、B–C(9)；C–A(7)、C–E(4)、C–B(9)；D–E(6)；E–B(18)、E–D(6)、E–C(4)、E–A(15)。", "style_instruction": "无特殊要求", "control_instruction": "每次遇到被当作pivot的节点就暂停大约1秒，同时对处于idle_node状态的节点，在它上方标注“找到了!”。"}, "gold_standard_output": {"algorithm_id": "bfs", "data_input": {"graph": {"E": [["B", 18], ["D", 6], ["C", 4], ["A", 15]], "B": [["E", 18], ["A", 4], ["C", 9]], "A": [["C", 7], ["B", 4], ["E", 15]], "C": [["A", 7], ["E", 4], ["B", 9]], "D": [["E", 6]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {"pauses": [{"condition": {"styleKey": "pivot"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "idle_node"}, "text": "找到了!", "position": "top"}]}}, "model_output": {"algorithm_id": "bfs", "data_input": {"graph": {"A": [["C", 7], ["B", 4], ["E", 15]], "B": [["E", 18], ["A", 4], ["C", 9]], "C": [["A", 7], ["E", 4], ["B", 9]], "D": [["E", 6]], "E": [["B", 18], ["D", 6], ["C", 4], ["A", 15]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {"pauses": [{"condition": {"styleKey": "pivot"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "idle_node"}, "text": "找到了!", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看一段从节点A出发的深度优先遍历动画，图的结构如下：A和C相连，权重18；C还连到E(15)和B(6)；B有到D的三条边(权重9、7、1)，还连到E(12)和C(6)；D连到B(9、7、1)；E连到B(12)和C(15)。", "style_instruction": "把所有普通边(normal_edge)都涂成#7abf75的绿色，线宽设为2.5；空闲节点(idle_node)填充色用#8cb371，边框stroke用#5d8cb5，线宽2。", "control_instruction": "每当发生样式更新(updateStyle)时，就在对应元素上方(top)标注“交换”。"}, "gold_standard_output": {"algorithm_id": "dfs", "data_input": {"graph": {"A": [["C", 18]], "C": [["A", 18], ["E", 15], ["B", 6]], "D": [["B", 9], ["B", 7], ["B", 1]], "B": [["D", 9], ["D", 7], ["E", 12], ["D", 1], ["C", 6]], "E": [["B", 12], ["C", 15]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"normal_edge": {"color": "#7abf75", "strokeWidth": 2.5}, "idle_node": {"fill": "#8cb371", "stroke": "#5d8cb5", "strokeWidth": 2}}}, "control_object": {"annotations": [{"condition": {"op": "updateStyle"}, "text": "交换", "position": "top"}]}}, "model_output": {"algorithm_id": "dfs", "data_input": {"graph": {"A": [["C", 18]], "C": [["A", 18], ["E", 15], ["B", 6]], "B": [["C", 6], ["E", 12], ["D", 9], ["D", 7], ["D", 1]], "D": [["B", 9], ["B", 7], ["B", 1]], "E": [["B", 12], ["C", 15]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"normal_edge": {"color": "#7abf75", "strokeWidth": 2.5}, "idle_node": {"fill": "#8cb371", "stroke": "#5d8cb5", "strokeWidth": 2}}}, "control_object": {"annotations": [{"condition": {"op": "updateStyle"}, "text": "交换", "position": "top"}]}}}
{"user_input": {"core_instruction": "给我可视化 Prim 算法构造最小生成树，从节点 A 出发。图的边信息是：A–C 权重9，C–B 权重14，B–E 权重分别为1、18和4，B–D 权重13，D–E 权重3。", "style_instruction": "已加入生成树的节点用红色填充（#fa1149）和天蓝色描边（#24b6e4，宽1.5）；正在交换的元素用深蓝灰填充（#32317e）和紫色描边（#654fc3，宽3）；元素移动动画默认持续1秒。", "control_instruction": "每当发生元素位移（shiftElements）操作时，就暂停0.5秒。"}, "gold_standard_output": {"algorithm_id": "prim", "data_input": {"graph": {"E": [["B", 1], ["B", 18], ["D", 3], ["B", 4]], "B": [["E", 1], ["C", 14], ["E", 18], ["E", 4], ["D", 13]], "C": [["B", 14], ["A", 9]], "D": [["E", 3], ["B", 13]], "A": [["C", 9]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"in_path_node": {"fill": "#fa1149", "stroke": "#24b6e4", "strokeWidth": 1.5}, "swapping": {"fill": "#32317e", "stroke": "#654fc3", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"pauses": [{"condition": {"op": "shiftElements"}, "duration": 500}]}}, "model_output": {"algorithm_id": "prim", "data_input": {"graph": {"A": [["C", 9]], "C": [["A", 9], ["B", 14]], "B": [["C", 14], ["E", 1], ["E", 18], ["E", 4], ["D", 13]], "E": [["B", 1], ["B", 18], ["B", 4], ["D", 3]], "D": [["B", 13], ["E", 3]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"visited_node": {"fill": "#fa1149", "stroke": "#24b6e4", "strokeWidth": 1.5}, "swapping": {"fill": "#32317e", "stroke": "#654fc3", "strokeWidth": 3}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"op": "shiftElements"}, "duration": 500}], "annotations": []}}}
{"user_input": {"core_instruction": "我想看一下插入排序的可视化，数据是 [89, 43, 18, 51, 52, 74, 92, 54]。", "style_instruction": "无特殊要求", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "insertion_sort", "data_input": [89, 43, 18, 51, 52, 74, 92, 54], "style_overrides": {}, "control_object": {}}, "model_output": {"algorithm_id": "insertion_sort", "data_input": [89, 43, 18, 51, 52, 74, 92, 54], "style_overrides": {}, "control_object": {}}}
{"user_input": {"core_instruction": "请用冒泡排序对这组数据 [20, 40, 84, 86, 32, 93, 15] 进行可视化。", "style_instruction": "无特殊要求", "control_instruction": "在每次比较元素的时候暂停一下，大概500毫秒。"}, "gold_standard_output": {"algorithm_id": "bubble_sort", "data_input": [20, 40, 84, 86, 32, 93, 15], "style_overrides": {}, "control_object": {"pauses": [{"condition": {"styleKey": "compare"}, "duration": 500}]}}, "model_output": {"algorithm_id": "bubble_sort", "data_input": [20, 40, 84, 86, 32, 93, 15], "style_overrides": {}, "control_object": {"pauses": [{"condition": {"styleKey": "compare"}, "duration": 500}]}}}
{"user_input": {"core_instruction": "我想看一次快速排序的可视化，数据是 [5, 61, 2, 96, 83, 12]。", "style_instruction": "无特殊要求", "control_instruction": "每当一个子数组被激活（高亮）的时候，给我停顿大约1.5秒，让我能看清楚那部分的处理过程。"}, "gold_standard_output": {"algorithm_id": "quick_sort", "data_input": [5, 61, 2, 96, 83, 12], "style_overrides": {}, "control_object": {"pauses": [{"condition": {"styleKey": "sub_array_active"}, "duration": 1500}]}}, "model_output": {"algorithm_id": "quick_sort", "data_input": [5, 61, 2, 96, 83, 12], "style_overrides": {}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"styleKey": "sub_array_active"}, "duration": 1500}], "annotations": []}}}
{"user_input": {"core_instruction": "请用Bellman-Ford算法从节点A开始，对下面这个有向带权图进行可视化：节点E到A权值5、到B权值17、到D权值12；A到B权值17；B到D权值19和13；D到A权值12。", "style_instruction": "把访问过的节点（visited_node）填充成绿色（#18a24f），边框用蓝紫色（#5168f1）加粗1.5px；把正在松弛的边（shifting）填成深紫色（#702899），描边用亮绿（#92ca15）加粗2px；所有元素的默认移动动画时长设为750毫秒。", "control_instruction": "每次画普通边（styleKey为normal_edge）都暂停0.5秒；每当节点样式更新（op为updateNodeStyle）时，就在节点上方弹出“找到了!”的注释。"}, "gold_standard_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"E": [["A", 5], ["B", 17], ["D", 12]], "A": [["B", 17]], "B": [["D", 19], ["D", 13]], "D": [["A", 12]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"visited_node": {"fill": "#18a24f", "stroke": "#5168f1", "strokeWidth": 1.5}, "shifting": {"fill": "#702899", "stroke": "#92ca15", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 750}}}, "control_object": {"pauses": [{"condition": {"styleKey": "normal_edge"}, "duration": 500}], "annotations": [{"condition": {"op": "updateNodeStyle"}, "text": "找到了!", "position": "top"}]}}, "model_output": {"algorithm_id": "bellman_ford", "data_input": {"graph": {"E": [["A", 5], ["B", 17], ["D", 12]], "A": [["B", 17]], "B": [["D", 19], ["D", 13]], "D": [["A", 12]]}, "start_node": "A"}, "style_overrides": {"elementStyles": {"visited_node": {"fill": "#18a24f", "stroke": "#5168f1", "strokeWidth": 1.5}, "shifting": {"fill": "#702899", "stroke": "#92ca15", "strokeWidth": 2}}, "animationStyles": {"default_move": {"type": "ease-in-out", "duration": 750}}}, "control_object": {"pauses": [{"condition": {"styleKey": "normal_edge"}, "duration": 500}], "annotations": [{"condition": {"op": "updateNodeStyle"}, "text": "找到了!", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想看编辑距离(Edit Distance)算法的可视化，计算字符串“TGGTA”和“ACTCAT”之间的最小编辑距离。", "style_instruction": "把所有执行移动(shifting)操作的节点都渲染成填充色#2a6cf1，描边用#b63214并设置描边宽度为2px。", "control_instruction": "凡是属于 in_path_node 的节点，都在它们顶部加个注释，文字写“交换”。"}, "gold_standard_output": {"algorithm_id": "edit_distance", "data_input": {"str1": "TGGTA", "str2": "ACTCAT"}, "style_overrides": {"elementStyles": {"shifting": {"fill": "#2a6cf1", "stroke": "#b63214", "strokeWidth": 2}}}, "control_object": {"annotations": [{"condition": {"styleKey": "in_path_node"}, "text": "交换", "position": "top"}]}}, "model_output": {"algorithm_id": "edit_distance", "data_input": {"str1": "TGGTA", "str2": "ACTCAT"}, "style_overrides": {"elementStyles": {"shifting": {"fill": "#2a6cf1", "stroke": "#b63214", "strokeWidth": 2}}}, "control_object": {"annotations": [{"condition": {"styleKey": "in_path_node"}, "text": "交换", "position": "top"}]}}}
{"user_input": {"core_instruction": "请用选择排序可视化数据 [10, 73, 70, 93, 49, 8]。", "style_instruction": "我想把正在移动或交换的元素（shifting）涂成深紫色 #560659，并用棕色 #695625 的边框描边，边框宽度设为3；把当前的枢轴（pivot）标成紫罗兰色 #9e29f1，边框用 #93885f，线宽2.5；并且每次元素移动的动画我希望慢一点，大概持续1秒。", "control_instruction": "默认"}, "gold_standard_output": {"algorithm_id": "selection_sort", "data_input": [10, 73, 70, 93, 49, 8], "style_overrides": {"elementStyles": {"shifting": {"fill": "#560659", "stroke": "#695625", "strokeWidth": 3}, "pivot": {"fill": "#9e29f1", "stroke": "#93885f", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {}}, "model_output": {"algorithm_id": "selection_sort", "data_input": [10, 73, 70, 93, 49, 8], "style_overrides": {"elementStyles": {"shifting": {"fill": "#560659", "stroke": "#695625", "strokeWidth": 3}, "pivot": {"fill": "#9e29f1", "stroke": "#93885f", "strokeWidth": 2.5}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {}}}
{"user_input": {"core_instruction": "我想看 Dijkstra 算法在一个含有四个节点 A、B、C、D 的图上的可视化，节点间权重如下：A–C 边权 4、A–D 边权 6；C–D 有两条边，权重分别是 12 和 13；C–B 有两条边，权重分别是 14 和 20。请从节点 A 开始演示最短路径搜索过程。", "style_instruction": "无特殊要求", "control_instruction": "每次执行 updateNodeStyle 操作时，都在节点上方显示“找到了!”的注释。"}, "gold_standard_output": {"algorithm_id": "dijkstra", "data_input": {"graph": {"C": [["B", 14], ["B", 20], ["D", 12], ["D", 13], ["A", 4]], "B": [["C", 14], ["C", 20]], "D": [["A", 6], ["C", 12], ["C", 13]], "A": [["D", 6], ["C", 4]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {"annotations": [{"condition": {"op": "updateNodeStyle"}, "text": "找到了!", "position": "top"}]}}, "model_output": {"algorithm_id": "dijkstra", "data_input": {"graph": {"A": [["C", 4], ["D", 6]], "B": [["C", 14], ["C", 20]], "C": [["A", 4], ["D", 12], ["D", 13], ["B", 14], ["B", 20]], "D": [["A", 6], ["C", 12], ["C", 13]]}, "start_node": "A"}, "style_overrides": {}, "control_object": {"annotations": [{"condition": {"op": "updateNodeStyle"}, "text": "找到了!", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想用编辑距离算法直观地演示一下，把字符串 “TGCACTA” 和 “AACAGGC” 之间的最小编辑步骤都算出来。", "style_instruction": "把每个被访问过的节点都染成荧光绿（#14f732），并用深绿（#1eb812）加粗边框到3px；至于属于最优路径的连线，用深紫色（#322d78）细线，线宽1.5px。", "control_instruction": "每次发生 shiftElements（元素移位）操作时，都在画面顶部弹出“处理中...”的注释提示。"}, "gold_standard_output": {"algorithm_id": "edit_distance", "data_input": {"str1": "TGCACTA", "str2": "AACAGGC"}, "style_overrides": {"elementStyles": {"visited_node": {"fill": "#14f732", "stroke": "#1eb812", "strokeWidth": 3}, "in_path_edge": {"color": "#322d78", "strokeWidth": 1.5}}}, "control_object": {"annotations": [{"condition": {"op": "shiftElements"}, "text": "处理中...", "position": "top"}]}}, "model_output": {"algorithm_id": "edit_distance", "data_input": {"str1": "TGCACTA", "str2": "AACAGGC"}, "style_overrides": {"elementStyles": {"visited_node": {"fill": "#14f732", "stroke": "#1eb812", "strokeWidth": 3}, "in_path_edge": {"color": "#322d78", "strokeWidth": 1.5}}}, "control_object": {"annotations": [{"condition": {"op": "shiftElements"}, "text": "处理中...", "position": "top"}]}}}
{"user_input": {"core_instruction": "我想用冒泡排序来演示数组 [32, 34, 26, 71, 85, 3, 15] 的排序过程。", "style_instruction": "把遍历过的边涂成亮绿色（#3db412），线条要粗一点，宽度2；所有元素移动的动画都放慢到1秒完成一次移动。", "control_instruction": "每次两个元素进行比较时，都暂停1秒；当某条边满足 in_path_edge 条件时，在它的上方冒个小注释写“找到了!”。"}, "gold_standard_output": {"algorithm_id": "bubble_sort", "data_input": [32, 34, 26, 71, 85, 3, 15], "style_overrides": {"elementStyles": {"traversed_edge": {"color": "#3db412", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"pauses": [{"condition": {"styleKey": "compare"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "in_path_edge"}, "text": "找到了!", "position": "top"}]}}, "model_output": {"algorithm_id": "bubble_sort", "data_input": [32, 34, 26, 71, 85, 3, 15], "style_overrides": {"elementStyles": {"traversed_edge": {"color": "#3db412", "strokeWidth": 2}}, "animationStyles": {"default_move": {"duration": 1000}}}, "control_object": {"speed_multiplier": 1.0, "pauses": [{"condition": {"styleKey": "compare"}, "duration": 1000}], "annotations": [{"condition": {"styleKey": "in_path_edge"}, "text": "找到了!", "position": "top"}]}}}
