# style_merger.py

import json
import copy
from default_styles import DEFAULT_STYLES

# Base: default styles
# (using part of default_styles.py as example)

# Input: style overrides from LLM "style translator"
# (simulated LLM output)
style_overrides = {
  "elementStyles": {
    "dependency_cell": {
      "fill": "rgba(33, 150, 243, 0.7)",
      "stroke": "rgba(33, 150, 243, 0.7)",
      "strokeWidth": 3
    }
  }
}

# Core: deep merge function
def merge_styles(base_styles: dict, override_styles: dict) -> dict:
    """
    Deep merge two style dictionaries.
    Recursively overwrites values from override_styles to a deep copy of base_styles.
    
    :param base_styles: base style dict (e.g. DEFAULT_STYLES)
    :param override_styles: style dict to override (from LLM)
    :return: new merged style dict
    """
    # Step 1: create deep copy of base styles to avoid modifying original
    merged = copy.deepcopy(base_styles)
    
    # Iterate through all key-value pairs to override
    for key, value in override_styles.items():
        # If value is dict and key exists in base with dict value, merge recursively
        if isinstance(value, dict) and key in merged and isinstance(merged.get(key), dict):
            merged[key] = merge_styles(merged[key], value)
        else:
            # Otherwise, directly override or add
            merged[key] = value
            
    return merged

# Execute and verify
if __name__ == '__main__':
    # Execute merge
    final_styles = merge_styles(DEFAULT_STYLES, style_overrides)
    # Save result to final_styles.py
    with open('final_styles.py', 'w', encoding='utf-8') as f:
        f.write('# final_styles.py\n')
        f.write('# Generated by style_merger.py\n\n')
        f.write('DEFAULT_STYLES = ')
        f.write(json.dumps(final_styles, indent=2, ensure_ascii=False))
        f.write('\n')

